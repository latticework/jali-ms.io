{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportNamespaceSpecifier",
          "local": {
            "type": "Identifier",
            "name": "TypeGuards",
            "range": [
              12,
              22
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 12
              },
              "end": {
                "line": 1,
                "column": 22
              }
            }
          },
          "range": [
            7,
            22
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 7
            },
            "end": {
              "line": 1,
              "column": 22
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./type-guards",
        "raw": "'./type-guards'",
        "range": [
          28,
          43
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 43
          }
        }
      },
      "range": [
        0,
        44
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 44
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentEmptyStringError",
            "range": [
              52,
              76
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 7
              },
              "end": {
                "line": 2,
                "column": 31
              }
            }
          },
          "range": [
            52,
            76
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 7
            },
            "end": {
              "line": 2,
              "column": 31
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-empty-string-error",
        "raw": "'./argument-empty-string-error'",
        "range": [
          82,
          113
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 37
          },
          "end": {
            "line": 2,
            "column": 68
          }
        }
      },
      "range": [
        45,
        114
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 69
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentError",
            "range": [
              122,
              135
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 7
              },
              "end": {
                "line": 3,
                "column": 20
              }
            }
          },
          "range": [
            122,
            135
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 7
            },
            "end": {
              "line": 3,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-error",
        "raw": "'./argument-error'",
        "range": [
          141,
          159
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 26
          },
          "end": {
            "line": 3,
            "column": 44
          }
        }
      },
      "range": [
        115,
        160
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 45
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentFalseError",
            "range": [
              168,
              186
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 7
              },
              "end": {
                "line": 4,
                "column": 25
              }
            }
          },
          "range": [
            168,
            186
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 7
            },
            "end": {
              "line": 4,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-false-error",
        "raw": "'./argument-false-error'",
        "range": [
          192,
          216
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 31
          },
          "end": {
            "line": 4,
            "column": 55
          }
        }
      },
      "range": [
        161,
        217
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 56
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentFalsyError",
            "range": [
              225,
              243
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 7
              },
              "end": {
                "line": 5,
                "column": 25
              }
            }
          },
          "range": [
            225,
            243
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 7
            },
            "end": {
              "line": 5,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-falsy-error",
        "raw": "'./argument-falsy-error'",
        "range": [
          249,
          273
        ],
        "loc": {
          "start": {
            "line": 5,
            "column": 31
          },
          "end": {
            "line": 5,
            "column": 55
          }
        }
      },
      "range": [
        218,
        274
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 56
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentNanError",
            "range": [
              282,
              298
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 7
              },
              "end": {
                "line": 6,
                "column": 23
              }
            }
          },
          "range": [
            282,
            298
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 7
            },
            "end": {
              "line": 6,
              "column": 23
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-nan-error",
        "raw": "'./argument-nan-error'",
        "range": [
          304,
          326
        ],
        "loc": {
          "start": {
            "line": 6,
            "column": 29
          },
          "end": {
            "line": 6,
            "column": 51
          }
        }
      },
      "range": [
        275,
        327
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 52
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentNullError",
            "range": [
              335,
              352
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 7
              },
              "end": {
                "line": 7,
                "column": 24
              }
            }
          },
          "range": [
            335,
            352
          ],
          "loc": {
            "start": {
              "line": 7,
              "column": 7
            },
            "end": {
              "line": 7,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-null-error",
        "raw": "'./argument-null-error'",
        "range": [
          358,
          381
        ],
        "loc": {
          "start": {
            "line": 7,
            "column": 30
          },
          "end": {
            "line": 7,
            "column": 53
          }
        }
      },
      "range": [
        328,
        382
      ],
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 54
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentTypeError",
            "range": [
              390,
              407
            ],
            "loc": {
              "start": {
                "line": 8,
                "column": 7
              },
              "end": {
                "line": 8,
                "column": 24
              }
            }
          },
          "range": [
            390,
            407
          ],
          "loc": {
            "start": {
              "line": 8,
              "column": 7
            },
            "end": {
              "line": 8,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-type-error",
        "raw": "'./argument-type-error'",
        "range": [
          413,
          436
        ],
        "loc": {
          "start": {
            "line": 8,
            "column": 30
          },
          "end": {
            "line": 8,
            "column": 53
          }
        }
      },
      "range": [
        383,
        437
      ],
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 54
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentUndefinedError",
            "range": [
              445,
              467
            ],
            "loc": {
              "start": {
                "line": 9,
                "column": 7
              },
              "end": {
                "line": 9,
                "column": 29
              }
            }
          },
          "range": [
            445,
            467
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 7
            },
            "end": {
              "line": 9,
              "column": 29
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-undefined-error",
        "raw": "'./argument-undefined-error'",
        "range": [
          473,
          501
        ],
        "loc": {
          "start": {
            "line": 9,
            "column": 35
          },
          "end": {
            "line": 9,
            "column": 63
          }
        }
      },
      "range": [
        438,
        502
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 64
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentWhitespaceStringError",
            "range": [
              510,
              539
            ],
            "loc": {
              "start": {
                "line": 10,
                "column": 7
              },
              "end": {
                "line": 10,
                "column": 36
              }
            }
          },
          "range": [
            510,
            539
          ],
          "loc": {
            "start": {
              "line": 10,
              "column": 7
            },
            "end": {
              "line": 10,
              "column": 36
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-whitespace-string-error",
        "raw": "'./argument-whitespace-string-error'",
        "range": [
          545,
          581
        ],
        "loc": {
          "start": {
            "line": 10,
            "column": 42
          },
          "end": {
            "line": 10,
            "column": 78
          }
        }
      },
      "range": [
        503,
        582
      ],
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 79
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentZeroError",
            "range": [
              590,
              607
            ],
            "loc": {
              "start": {
                "line": 11,
                "column": 7
              },
              "end": {
                "line": 11,
                "column": 24
              }
            }
          },
          "range": [
            590,
            607
          ],
          "loc": {
            "start": {
              "line": 11,
              "column": 7
            },
            "end": {
              "line": 11,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-zero-error",
        "raw": "'./argument-zero-error'",
        "range": [
          613,
          636
        ],
        "loc": {
          "start": {
            "line": 11,
            "column": 30
          },
          "end": {
            "line": 11,
            "column": 53
          }
        }
      },
      "range": [
        583,
        637
      ],
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 11,
          "column": 54
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value does not pass the specified test.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {!function(value: T) => boolean} test -\n *    Evaluates whether the value meets expectations.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentError}\n *    The test failed.\n *\n * @example <caption>verify that parameter deposit is non-negative</caption>\n * verifyArgument('deposit', deposit, arg => arg > 0.0);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, examples ④ & ⑤</a>\n * @see {@link ArgumentError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            638,
            1832
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyArgument",
          "range": [
            1849,
            1863
          ],
          "loc": {
            "start": {
              "line": 44,
              "column": 16
            },
            "end": {
              "line": 44,
              "column": 30
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              1864,
              1868
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 31
              },
              "end": {
                "line": 44,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              1870,
              1875
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 37
              },
              "end": {
                "line": 44,
                "column": 42
              }
            }
          },
          {
            "type": "Identifier",
            "name": "test",
            "range": [
              1877,
              1881
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 44
              },
              "end": {
                "line": 44,
                "column": 48
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              1883,
              1890
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 50
              },
              "end": {
                "line": 44,
                "column": 57
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "test",
                    "range": [
                      1903,
                      1907
                    ],
                    "loc": {
                      "start": {
                        "line": 45,
                        "column": 9
                      },
                      "end": {
                        "line": 45,
                        "column": 13
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value",
                      "range": [
                        1908,
                        1913
                      ],
                      "loc": {
                        "start": {
                          "line": 45,
                          "column": 14
                        },
                        "end": {
                          "line": 45,
                          "column": 19
                        }
                      }
                    }
                  ],
                  "range": [
                    1903,
                    1914
                  ],
                  "loc": {
                    "start": {
                      "line": 45,
                      "column": 9
                    },
                    "end": {
                      "line": 45,
                      "column": 20
                    }
                  }
                },
                "prefix": true,
                "range": [
                  1902,
                  1914
                ],
                "loc": {
                  "start": {
                    "line": 45,
                    "column": 8
                  },
                  "end": {
                    "line": 45,
                    "column": 20
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentError",
                        "range": [
                          1936,
                          1949
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 18
                          },
                          "end": {
                            "line": 46,
                            "column": 31
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            1950,
                            1954
                          ],
                          "loc": {
                            "start": {
                              "line": 46,
                              "column": 32
                            },
                            "end": {
                              "line": 46,
                              "column": 36
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              1956,
                              1968
                            ],
                            "loc": {
                              "start": {
                                "line": 46,
                                "column": 38
                              },
                              "end": {
                                "line": 46,
                                "column": 50
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                1969,
                                1974
                              ],
                              "loc": {
                                "start": {
                                  "line": 46,
                                  "column": 51
                                },
                                "end": {
                                  "line": 46,
                                  "column": 56
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                1976,
                                1983
                              ],
                              "loc": {
                                "start": {
                                  "line": 46,
                                  "column": 58
                                },
                                "end": {
                                  "line": 46,
                                  "column": 65
                                }
                              }
                            }
                          ],
                          "range": [
                            1956,
                            1984
                          ],
                          "loc": {
                            "start": {
                              "line": 46,
                              "column": 38
                            },
                            "end": {
                              "line": 46,
                              "column": 66
                            }
                          }
                        }
                      ],
                      "range": [
                        1932,
                        1985
                      ],
                      "loc": {
                        "start": {
                          "line": 46,
                          "column": 14
                        },
                        "end": {
                          "line": 46,
                          "column": 67
                        }
                      }
                    },
                    "range": [
                      1926,
                      1986
                    ],
                    "loc": {
                      "start": {
                        "line": 46,
                        "column": 8
                      },
                      "end": {
                        "line": 46,
                        "column": 68
                      }
                    }
                  }
                ],
                "range": [
                  1916,
                  1992
                ],
                "loc": {
                  "start": {
                    "line": 45,
                    "column": 22
                  },
                  "end": {
                    "line": 47,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                1898,
                1992
              ],
              "loc": {
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 47,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            1892,
            1994
          ],
          "loc": {
            "start": {
              "line": 44,
              "column": 59
            },
            "end": {
              "line": 48,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1840,
          1994
        ],
        "loc": {
          "start": {
            "line": 44,
            "column": 7
          },
          "end": {
            "line": 48,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value does not pass the specified test.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {!function(value: T) => boolean} test -\n *    Evaluates whether the value meets expectations.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentError}\n *    The test failed.\n *\n * @example <caption>verify that parameter deposit is non-negative</caption>\n * verifyArgument('deposit', deposit, arg => arg > 0.0);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, examples ④ & ⑤</a>\n * @see {@link ArgumentError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              638,
              1832
            ],
            "loc": {
              "start": {
                "line": 12,
                "column": 0
              },
              "end": {
                "line": 43,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
            "range": [
              1995,
              3213
            ],
            "loc": {
              "start": {
                "line": 49,
                "column": 0
              },
              "end": {
                "line": 83,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1833,
        1994
      ],
      "loc": {
        "start": {
          "line": 44,
          "column": 0
        },
        "end": {
          "line": 48,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value does not pass the specified test.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {!function(value: T) => boolean} test -\n *    Evaluates whether the value meets expectations.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentError}\n *    The test failed.\n *\n * @example <caption>verify that parameter deposit is non-negative</caption>\n * verifyArgument('deposit', deposit, arg => arg > 0.0);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, examples ④ & ⑤</a>\n * @see {@link ArgumentError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            638,
            1832
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
          "range": [
            1995,
            3213
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 0
            },
            "end": {
              "line": 83,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyArray",
          "range": [
            3230,
            3241
          ],
          "loc": {
            "start": {
              "line": 84,
              "column": 16
            },
            "end": {
              "line": 84,
              "column": 27
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              3242,
              3246
            ],
            "loc": {
              "start": {
                "line": 84,
                "column": 28
              },
              "end": {
                "line": 84,
                "column": 32
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              3248,
              3253
            ],
            "loc": {
              "start": {
                "line": 84,
                "column": 34
              },
              "end": {
                "line": 84,
                "column": 39
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              3255,
              3262
            ],
            "loc": {
              "start": {
                "line": 84,
                "column": 41
              },
              "end": {
                "line": 84,
                "column": 48
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    3270,
                    3283
                  ],
                  "loc": {
                    "start": {
                      "line": 85,
                      "column": 4
                    },
                    "end": {
                      "line": 85,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      3284,
                      3288
                    ],
                    "loc": {
                      "start": {
                        "line": 85,
                        "column": 18
                      },
                      "end": {
                        "line": 85,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      3290,
                      3295
                    ],
                    "loc": {
                      "start": {
                        "line": 85,
                        "column": 24
                      },
                      "end": {
                        "line": 85,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      3297,
                      3304
                    ],
                    "loc": {
                      "start": {
                        "line": 85,
                        "column": 31
                      },
                      "end": {
                        "line": 85,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  3270,
                  3305
                ],
                "loc": {
                  "start": {
                    "line": 85,
                    "column": 4
                  },
                  "end": {
                    "line": 85,
                    "column": 39
                  }
                }
              },
              "range": [
                3270,
                3306
              ],
              "loc": {
                "start": {
                  "line": 85,
                  "column": 4
                },
                "end": {
                  "line": 85,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Array",
                      "range": [
                        3316,
                        3321
                      ],
                      "loc": {
                        "start": {
                          "line": 86,
                          "column": 9
                        },
                        "end": {
                          "line": 86,
                          "column": 14
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "isArray",
                      "range": [
                        3322,
                        3329
                      ],
                      "loc": {
                        "start": {
                          "line": 86,
                          "column": 15
                        },
                        "end": {
                          "line": 86,
                          "column": 22
                        }
                      }
                    },
                    "range": [
                      3316,
                      3329
                    ],
                    "loc": {
                      "start": {
                        "line": 86,
                        "column": 9
                      },
                      "end": {
                        "line": 86,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value",
                      "range": [
                        3330,
                        3335
                      ],
                      "loc": {
                        "start": {
                          "line": 86,
                          "column": 23
                        },
                        "end": {
                          "line": 86,
                          "column": 28
                        }
                      }
                    }
                  ],
                  "range": [
                    3316,
                    3336
                  ],
                  "loc": {
                    "start": {
                      "line": 86,
                      "column": 9
                    },
                    "end": {
                      "line": 86,
                      "column": 29
                    }
                  }
                },
                "prefix": true,
                "range": [
                  3315,
                  3336
                ],
                "loc": {
                  "start": {
                    "line": 86,
                    "column": 8
                  },
                  "end": {
                    "line": 86,
                    "column": 29
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          3358,
                          3375
                        ],
                        "loc": {
                          "start": {
                            "line": 87,
                            "column": 18
                          },
                          "end": {
                            "line": 87,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "Array",
                          "raw": "'Array'",
                          "range": [
                            3376,
                            3383
                          ],
                          "loc": {
                            "start": {
                              "line": 87,
                              "column": 36
                            },
                            "end": {
                              "line": 87,
                              "column": 43
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            3385,
                            3389
                          ],
                          "loc": {
                            "start": {
                              "line": 87,
                              "column": 45
                            },
                            "end": {
                              "line": 87,
                              "column": 49
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              3391,
                              3403
                            ],
                            "loc": {
                              "start": {
                                "line": 87,
                                "column": 51
                              },
                              "end": {
                                "line": 87,
                                "column": 63
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                3404,
                                3409
                              ],
                              "loc": {
                                "start": {
                                  "line": 87,
                                  "column": 64
                                },
                                "end": {
                                  "line": 87,
                                  "column": 69
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                3411,
                                3418
                              ],
                              "loc": {
                                "start": {
                                  "line": 87,
                                  "column": 71
                                },
                                "end": {
                                  "line": 87,
                                  "column": 78
                                }
                              }
                            }
                          ],
                          "range": [
                            3391,
                            3419
                          ],
                          "loc": {
                            "start": {
                              "line": 87,
                              "column": 51
                            },
                            "end": {
                              "line": 87,
                              "column": 79
                            }
                          }
                        }
                      ],
                      "range": [
                        3354,
                        3420
                      ],
                      "loc": {
                        "start": {
                          "line": 87,
                          "column": 14
                        },
                        "end": {
                          "line": 87,
                          "column": 80
                        }
                      }
                    },
                    "range": [
                      3348,
                      3421
                    ],
                    "loc": {
                      "start": {
                        "line": 87,
                        "column": 8
                      },
                      "end": {
                        "line": 87,
                        "column": 81
                      }
                    }
                  }
                ],
                "range": [
                  3338,
                  3427
                ],
                "loc": {
                  "start": {
                    "line": 86,
                    "column": 31
                  },
                  "end": {
                    "line": 88,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                3311,
                3427
              ],
              "loc": {
                "start": {
                  "line": 86,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            3264,
            3429
          ],
          "loc": {
            "start": {
              "line": 84,
              "column": 50
            },
            "end": {
              "line": 89,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          3221,
          3429
        ],
        "loc": {
          "start": {
            "line": 84,
            "column": 7
          },
          "end": {
            "line": 89,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
            "range": [
              1995,
              3213
            ],
            "loc": {
              "start": {
                "line": 49,
                "column": 0
              },
              "end": {
                "line": 83,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              3430,
              4572
            ],
            "loc": {
              "start": {
                "line": 90,
                "column": 0
              },
              "end": {
                "line": 121,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        3214,
        3429
      ],
      "loc": {
        "start": {
          "line": 84,
          "column": 0
        },
        "end": {
          "line": 89,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
          "range": [
            1995,
            3213
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 0
            },
            "end": {
              "line": 83,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            3430,
            4572
          ],
          "loc": {
            "start": {
              "line": 90,
              "column": 0
            },
            "end": {
              "line": 121,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyBoolean",
          "range": [
            4589,
            4602
          ],
          "loc": {
            "start": {
              "line": 122,
              "column": 16
            },
            "end": {
              "line": 122,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              4603,
              4607
            ],
            "loc": {
              "start": {
                "line": 122,
                "column": 30
              },
              "end": {
                "line": 122,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              4609,
              4614
            ],
            "loc": {
              "start": {
                "line": 122,
                "column": 36
              },
              "end": {
                "line": 122,
                "column": 41
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              4616,
              4623
            ],
            "loc": {
              "start": {
                "line": 122,
                "column": 43
              },
              "end": {
                "line": 122,
                "column": 50
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    4631,
                    4644
                  ],
                  "loc": {
                    "start": {
                      "line": 123,
                      "column": 4
                    },
                    "end": {
                      "line": 123,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      4645,
                      4649
                    ],
                    "loc": {
                      "start": {
                        "line": 123,
                        "column": 18
                      },
                      "end": {
                        "line": 123,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      4651,
                      4656
                    ],
                    "loc": {
                      "start": {
                        "line": 123,
                        "column": 24
                      },
                      "end": {
                        "line": 123,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      4658,
                      4665
                    ],
                    "loc": {
                      "start": {
                        "line": 123,
                        "column": 31
                      },
                      "end": {
                        "line": 123,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  4631,
                  4666
                ],
                "loc": {
                  "start": {
                    "line": 123,
                    "column": 4
                  },
                  "end": {
                    "line": 123,
                    "column": 39
                  }
                }
              },
              "range": [
                4631,
                4667
              ],
              "loc": {
                "start": {
                  "line": 123,
                  "column": 4
                },
                "end": {
                  "line": 123,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      4683,
                      4688
                    ],
                    "loc": {
                      "start": {
                        "line": 124,
                        "column": 15
                      },
                      "end": {
                        "line": 124,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    4676,
                    4688
                  ],
                  "loc": {
                    "start": {
                      "line": 124,
                      "column": 8
                    },
                    "end": {
                      "line": 124,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "boolean",
                  "raw": "'boolean'",
                  "range": [
                    4693,
                    4702
                  ],
                  "loc": {
                    "start": {
                      "line": 124,
                      "column": 25
                    },
                    "end": {
                      "line": 124,
                      "column": 34
                    }
                  }
                },
                "range": [
                  4676,
                  4702
                ],
                "loc": {
                  "start": {
                    "line": 124,
                    "column": 8
                  },
                  "end": {
                    "line": 124,
                    "column": 34
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          4724,
                          4741
                        ],
                        "loc": {
                          "start": {
                            "line": 125,
                            "column": 18
                          },
                          "end": {
                            "line": 125,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "boolean",
                          "raw": "'boolean'",
                          "range": [
                            4742,
                            4751
                          ],
                          "loc": {
                            "start": {
                              "line": 125,
                              "column": 36
                            },
                            "end": {
                              "line": 125,
                              "column": 45
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            4753,
                            4757
                          ],
                          "loc": {
                            "start": {
                              "line": 125,
                              "column": 47
                            },
                            "end": {
                              "line": 125,
                              "column": 51
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              4759,
                              4771
                            ],
                            "loc": {
                              "start": {
                                "line": 125,
                                "column": 53
                              },
                              "end": {
                                "line": 125,
                                "column": 65
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                4772,
                                4777
                              ],
                              "loc": {
                                "start": {
                                  "line": 125,
                                  "column": 66
                                },
                                "end": {
                                  "line": 125,
                                  "column": 71
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                4779,
                                4786
                              ],
                              "loc": {
                                "start": {
                                  "line": 125,
                                  "column": 73
                                },
                                "end": {
                                  "line": 125,
                                  "column": 80
                                }
                              }
                            }
                          ],
                          "range": [
                            4759,
                            4787
                          ],
                          "loc": {
                            "start": {
                              "line": 125,
                              "column": 53
                            },
                            "end": {
                              "line": 125,
                              "column": 81
                            }
                          }
                        }
                      ],
                      "range": [
                        4720,
                        4788
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 14
                        },
                        "end": {
                          "line": 125,
                          "column": 82
                        }
                      }
                    },
                    "range": [
                      4714,
                      4789
                    ],
                    "loc": {
                      "start": {
                        "line": 125,
                        "column": 8
                      },
                      "end": {
                        "line": 125,
                        "column": 83
                      }
                    }
                  }
                ],
                "range": [
                  4704,
                  4795
                ],
                "loc": {
                  "start": {
                    "line": 124,
                    "column": 36
                  },
                  "end": {
                    "line": 126,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4672,
                4795
              ],
              "loc": {
                "start": {
                  "line": 124,
                  "column": 4
                },
                "end": {
                  "line": 126,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            4625,
            4797
          ],
          "loc": {
            "start": {
              "line": 122,
              "column": 52
            },
            "end": {
              "line": 127,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          4580,
          4797
        ],
        "loc": {
          "start": {
            "line": 122,
            "column": 7
          },
          "end": {
            "line": 127,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              3430,
              4572
            ],
            "loc": {
              "start": {
                "line": 90,
                "column": 0
              },
              "end": {
                "line": 121,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              4798,
              5909
            ],
            "loc": {
              "start": {
                "line": 128,
                "column": 0
              },
              "end": {
                "line": 158,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        4573,
        4797
      ],
      "loc": {
        "start": {
          "line": 122,
          "column": 0
        },
        "end": {
          "line": 127,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            3430,
            4572
          ],
          "loc": {
            "start": {
              "line": 90,
              "column": 0
            },
            "end": {
              "line": 121,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            4798,
            5909
          ],
          "loc": {
            "start": {
              "line": 128,
              "column": 0
            },
            "end": {
              "line": 158,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyDefined",
          "range": [
            5926,
            5939
          ],
          "loc": {
            "start": {
              "line": 159,
              "column": 16
            },
            "end": {
              "line": 159,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              5940,
              5944
            ],
            "loc": {
              "start": {
                "line": 159,
                "column": 30
              },
              "end": {
                "line": 159,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              5946,
              5951
            ],
            "loc": {
              "start": {
                "line": 159,
                "column": 36
              },
              "end": {
                "line": 159,
                "column": 41
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              5953,
              5960
            ],
            "loc": {
              "start": {
                "line": 159,
                "column": 43
              },
              "end": {
                "line": 159,
                "column": 50
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    5972,
                    5977
                  ],
                  "loc": {
                    "start": {
                      "line": 160,
                      "column": 8
                    },
                    "end": {
                      "line": 160,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "undefined",
                  "range": [
                    5982,
                    5991
                  ],
                  "loc": {
                    "start": {
                      "line": 160,
                      "column": 18
                    },
                    "end": {
                      "line": 160,
                      "column": 27
                    }
                  }
                },
                "range": [
                  5972,
                  5991
                ],
                "loc": {
                  "start": {
                    "line": 160,
                    "column": 8
                  },
                  "end": {
                    "line": 160,
                    "column": 27
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentUndefinedError",
                        "range": [
                          6013,
                          6035
                        ],
                        "loc": {
                          "start": {
                            "line": 161,
                            "column": 18
                          },
                          "end": {
                            "line": 161,
                            "column": 40
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            6036,
                            6040
                          ],
                          "loc": {
                            "start": {
                              "line": 161,
                              "column": 41
                            },
                            "end": {
                              "line": 161,
                              "column": 45
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              6042,
                              6054
                            ],
                            "loc": {
                              "start": {
                                "line": 161,
                                "column": 47
                              },
                              "end": {
                                "line": 161,
                                "column": 59
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                6055,
                                6060
                              ],
                              "loc": {
                                "start": {
                                  "line": 161,
                                  "column": 60
                                },
                                "end": {
                                  "line": 161,
                                  "column": 65
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                6062,
                                6069
                              ],
                              "loc": {
                                "start": {
                                  "line": 161,
                                  "column": 67
                                },
                                "end": {
                                  "line": 161,
                                  "column": 74
                                }
                              }
                            }
                          ],
                          "range": [
                            6042,
                            6070
                          ],
                          "loc": {
                            "start": {
                              "line": 161,
                              "column": 47
                            },
                            "end": {
                              "line": 161,
                              "column": 75
                            }
                          }
                        }
                      ],
                      "range": [
                        6009,
                        6071
                      ],
                      "loc": {
                        "start": {
                          "line": 161,
                          "column": 14
                        },
                        "end": {
                          "line": 161,
                          "column": 76
                        }
                      }
                    },
                    "range": [
                      6003,
                      6072
                    ],
                    "loc": {
                      "start": {
                        "line": 161,
                        "column": 8
                      },
                      "end": {
                        "line": 161,
                        "column": 77
                      }
                    }
                  }
                ],
                "range": [
                  5993,
                  6078
                ],
                "loc": {
                  "start": {
                    "line": 160,
                    "column": 29
                  },
                  "end": {
                    "line": 162,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                5968,
                6078
              ],
              "loc": {
                "start": {
                  "line": 160,
                  "column": 4
                },
                "end": {
                  "line": 162,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            5962,
            6080
          ],
          "loc": {
            "start": {
              "line": 159,
              "column": 52
            },
            "end": {
              "line": 163,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          5917,
          6080
        ],
        "loc": {
          "start": {
            "line": 159,
            "column": 7
          },
          "end": {
            "line": 163,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              4798,
              5909
            ],
            "loc": {
              "start": {
                "line": 128,
                "column": 0
              },
              "end": {
                "line": 158,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              6081,
              7237
            ],
            "loc": {
              "start": {
                "line": 164,
                "column": 0
              },
              "end": {
                "line": 195,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        5910,
        6080
      ],
      "loc": {
        "start": {
          "line": 159,
          "column": 0
        },
        "end": {
          "line": 163,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            4798,
            5909
          ],
          "loc": {
            "start": {
              "line": 128,
              "column": 0
            },
            "end": {
              "line": 158,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            6081,
            7237
          ],
          "loc": {
            "start": {
              "line": 164,
              "column": 0
            },
            "end": {
              "line": 195,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyFunction",
          "range": [
            7254,
            7268
          ],
          "loc": {
            "start": {
              "line": 196,
              "column": 16
            },
            "end": {
              "line": 196,
              "column": 30
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              7269,
              7273
            ],
            "loc": {
              "start": {
                "line": 196,
                "column": 31
              },
              "end": {
                "line": 196,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              7275,
              7280
            ],
            "loc": {
              "start": {
                "line": 196,
                "column": 37
              },
              "end": {
                "line": 196,
                "column": 42
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              7282,
              7289
            ],
            "loc": {
              "start": {
                "line": 196,
                "column": 44
              },
              "end": {
                "line": 196,
                "column": 51
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    7297,
                    7310
                  ],
                  "loc": {
                    "start": {
                      "line": 197,
                      "column": 4
                    },
                    "end": {
                      "line": 197,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      7311,
                      7315
                    ],
                    "loc": {
                      "start": {
                        "line": 197,
                        "column": 18
                      },
                      "end": {
                        "line": 197,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      7317,
                      7322
                    ],
                    "loc": {
                      "start": {
                        "line": 197,
                        "column": 24
                      },
                      "end": {
                        "line": 197,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      7324,
                      7331
                    ],
                    "loc": {
                      "start": {
                        "line": 197,
                        "column": 31
                      },
                      "end": {
                        "line": 197,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  7297,
                  7332
                ],
                "loc": {
                  "start": {
                    "line": 197,
                    "column": 4
                  },
                  "end": {
                    "line": 197,
                    "column": 39
                  }
                }
              },
              "range": [
                7297,
                7333
              ],
              "loc": {
                "start": {
                  "line": 197,
                  "column": 4
                },
                "end": {
                  "line": 197,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      7349,
                      7354
                    ],
                    "loc": {
                      "start": {
                        "line": 198,
                        "column": 15
                      },
                      "end": {
                        "line": 198,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    7342,
                    7354
                  ],
                  "loc": {
                    "start": {
                      "line": 198,
                      "column": 8
                    },
                    "end": {
                      "line": 198,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "function",
                  "raw": "'function'",
                  "range": [
                    7359,
                    7369
                  ],
                  "loc": {
                    "start": {
                      "line": 198,
                      "column": 25
                    },
                    "end": {
                      "line": 198,
                      "column": 35
                    }
                  }
                },
                "range": [
                  7342,
                  7369
                ],
                "loc": {
                  "start": {
                    "line": 198,
                    "column": 8
                  },
                  "end": {
                    "line": 198,
                    "column": 35
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          7391,
                          7408
                        ],
                        "loc": {
                          "start": {
                            "line": 199,
                            "column": 18
                          },
                          "end": {
                            "line": 199,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "function",
                          "raw": "'function'",
                          "range": [
                            7409,
                            7419
                          ],
                          "loc": {
                            "start": {
                              "line": 199,
                              "column": 36
                            },
                            "end": {
                              "line": 199,
                              "column": 46
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            7421,
                            7425
                          ],
                          "loc": {
                            "start": {
                              "line": 199,
                              "column": 48
                            },
                            "end": {
                              "line": 199,
                              "column": 52
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              7427,
                              7439
                            ],
                            "loc": {
                              "start": {
                                "line": 199,
                                "column": 54
                              },
                              "end": {
                                "line": 199,
                                "column": 66
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                7440,
                                7445
                              ],
                              "loc": {
                                "start": {
                                  "line": 199,
                                  "column": 67
                                },
                                "end": {
                                  "line": 199,
                                  "column": 72
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                7447,
                                7454
                              ],
                              "loc": {
                                "start": {
                                  "line": 199,
                                  "column": 74
                                },
                                "end": {
                                  "line": 199,
                                  "column": 81
                                }
                              }
                            }
                          ],
                          "range": [
                            7427,
                            7455
                          ],
                          "loc": {
                            "start": {
                              "line": 199,
                              "column": 54
                            },
                            "end": {
                              "line": 199,
                              "column": 82
                            }
                          }
                        }
                      ],
                      "range": [
                        7387,
                        7456
                      ],
                      "loc": {
                        "start": {
                          "line": 199,
                          "column": 14
                        },
                        "end": {
                          "line": 199,
                          "column": 83
                        }
                      }
                    },
                    "range": [
                      7381,
                      7457
                    ],
                    "loc": {
                      "start": {
                        "line": 199,
                        "column": 8
                      },
                      "end": {
                        "line": 199,
                        "column": 84
                      }
                    }
                  }
                ],
                "range": [
                  7371,
                  7463
                ],
                "loc": {
                  "start": {
                    "line": 198,
                    "column": 37
                  },
                  "end": {
                    "line": 200,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                7338,
                7463
              ],
              "loc": {
                "start": {
                  "line": 198,
                  "column": 4
                },
                "end": {
                  "line": 200,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            7291,
            7465
          ],
          "loc": {
            "start": {
              "line": 196,
              "column": 53
            },
            "end": {
              "line": 201,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          7245,
          7465
        ],
        "loc": {
          "start": {
            "line": 196,
            "column": 7
          },
          "end": {
            "line": 201,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              6081,
              7237
            ],
            "loc": {
              "start": {
                "line": 164,
                "column": 0
              },
              "end": {
                "line": 195,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
            "range": [
              7466,
              8724
            ],
            "loc": {
              "start": {
                "line": 202,
                "column": 0
              },
              "end": {
                "line": 236,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        7238,
        7465
      ],
      "loc": {
        "start": {
          "line": 196,
          "column": 0
        },
        "end": {
          "line": 201,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            6081,
            7237
          ],
          "loc": {
            "start": {
              "line": 164,
              "column": 0
            },
            "end": {
              "line": 195,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
          "range": [
            7466,
            8724
          ],
          "loc": {
            "start": {
              "line": 202,
              "column": 0
            },
            "end": {
              "line": 236,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyIterable",
          "range": [
            8741,
            8755
          ],
          "loc": {
            "start": {
              "line": 237,
              "column": 16
            },
            "end": {
              "line": 237,
              "column": 30
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              8756,
              8760
            ],
            "loc": {
              "start": {
                "line": 237,
                "column": 31
              },
              "end": {
                "line": 237,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              8762,
              8767
            ],
            "loc": {
              "start": {
                "line": 237,
                "column": 37
              },
              "end": {
                "line": 237,
                "column": 42
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              8769,
              8776
            ],
            "loc": {
              "start": {
                "line": 237,
                "column": 44
              },
              "end": {
                "line": 237,
                "column": 51
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    8784,
                    8797
                  ],
                  "loc": {
                    "start": {
                      "line": 238,
                      "column": 4
                    },
                    "end": {
                      "line": 238,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      8798,
                      8802
                    ],
                    "loc": {
                      "start": {
                        "line": 238,
                        "column": 18
                      },
                      "end": {
                        "line": 238,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      8804,
                      8809
                    ],
                    "loc": {
                      "start": {
                        "line": 238,
                        "column": 24
                      },
                      "end": {
                        "line": 238,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      8811,
                      8818
                    ],
                    "loc": {
                      "start": {
                        "line": 238,
                        "column": 31
                      },
                      "end": {
                        "line": 238,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  8784,
                  8819
                ],
                "loc": {
                  "start": {
                    "line": 238,
                    "column": 4
                  },
                  "end": {
                    "line": 238,
                    "column": 39
                  }
                }
              },
              "range": [
                8784,
                8820
              ],
              "loc": {
                "start": {
                  "line": 238,
                  "column": 4
                },
                "end": {
                  "line": 238,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "TypeGuards",
                      "range": [
                        8830,
                        8840
                      ],
                      "loc": {
                        "start": {
                          "line": 239,
                          "column": 9
                        },
                        "end": {
                          "line": 239,
                          "column": 19
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "isIterable",
                      "range": [
                        8841,
                        8851
                      ],
                      "loc": {
                        "start": {
                          "line": 239,
                          "column": 20
                        },
                        "end": {
                          "line": 239,
                          "column": 30
                        }
                      }
                    },
                    "range": [
                      8830,
                      8851
                    ],
                    "loc": {
                      "start": {
                        "line": 239,
                        "column": 9
                      },
                      "end": {
                        "line": 239,
                        "column": 30
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value",
                      "range": [
                        8852,
                        8857
                      ],
                      "loc": {
                        "start": {
                          "line": 239,
                          "column": 31
                        },
                        "end": {
                          "line": 239,
                          "column": 36
                        }
                      }
                    }
                  ],
                  "range": [
                    8830,
                    8858
                  ],
                  "loc": {
                    "start": {
                      "line": 239,
                      "column": 9
                    },
                    "end": {
                      "line": 239,
                      "column": 37
                    }
                  }
                },
                "prefix": true,
                "range": [
                  8829,
                  8858
                ],
                "loc": {
                  "start": {
                    "line": 239,
                    "column": 8
                  },
                  "end": {
                    "line": 239,
                    "column": 37
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          8880,
                          8897
                        ],
                        "loc": {
                          "start": {
                            "line": 240,
                            "column": 18
                          },
                          "end": {
                            "line": 240,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "iterable",
                          "raw": "'iterable'",
                          "range": [
                            8898,
                            8908
                          ],
                          "loc": {
                            "start": {
                              "line": 240,
                              "column": 36
                            },
                            "end": {
                              "line": 240,
                              "column": 46
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            8910,
                            8914
                          ],
                          "loc": {
                            "start": {
                              "line": 240,
                              "column": 48
                            },
                            "end": {
                              "line": 240,
                              "column": 52
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              8916,
                              8928
                            ],
                            "loc": {
                              "start": {
                                "line": 240,
                                "column": 54
                              },
                              "end": {
                                "line": 240,
                                "column": 66
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                8929,
                                8934
                              ],
                              "loc": {
                                "start": {
                                  "line": 240,
                                  "column": 67
                                },
                                "end": {
                                  "line": 240,
                                  "column": 72
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                8936,
                                8943
                              ],
                              "loc": {
                                "start": {
                                  "line": 240,
                                  "column": 74
                                },
                                "end": {
                                  "line": 240,
                                  "column": 81
                                }
                              }
                            }
                          ],
                          "range": [
                            8916,
                            8944
                          ],
                          "loc": {
                            "start": {
                              "line": 240,
                              "column": 54
                            },
                            "end": {
                              "line": 240,
                              "column": 82
                            }
                          }
                        }
                      ],
                      "range": [
                        8876,
                        8945
                      ],
                      "loc": {
                        "start": {
                          "line": 240,
                          "column": 14
                        },
                        "end": {
                          "line": 240,
                          "column": 83
                        }
                      }
                    },
                    "range": [
                      8870,
                      8946
                    ],
                    "loc": {
                      "start": {
                        "line": 240,
                        "column": 8
                      },
                      "end": {
                        "line": 240,
                        "column": 84
                      }
                    }
                  }
                ],
                "range": [
                  8860,
                  8952
                ],
                "loc": {
                  "start": {
                    "line": 239,
                    "column": 39
                  },
                  "end": {
                    "line": 241,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                8825,
                8952
              ],
              "loc": {
                "start": {
                  "line": 239,
                  "column": 4
                },
                "end": {
                  "line": 241,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            8778,
            8954
          ],
          "loc": {
            "start": {
              "line": 237,
              "column": 53
            },
            "end": {
              "line": 242,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          8732,
          8954
        ],
        "loc": {
          "start": {
            "line": 237,
            "column": 7
          },
          "end": {
            "line": 242,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
            "range": [
              7466,
              8724
            ],
            "loc": {
              "start": {
                "line": 202,
                "column": 0
              },
              "end": {
                "line": 236,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
            "range": [
              8955,
              10192
            ],
            "loc": {
              "start": {
                "line": 243,
                "column": 0
              },
              "end": {
                "line": 276,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        8725,
        8954
      ],
      "loc": {
        "start": {
          "line": 237,
          "column": 0
        },
        "end": {
          "line": 242,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
          "range": [
            7466,
            8724
          ],
          "loc": {
            "start": {
              "line": 202,
              "column": 0
            },
            "end": {
              "line": 236,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
          "range": [
            8955,
            10192
          ],
          "loc": {
            "start": {
              "line": 243,
              "column": 0
            },
            "end": {
              "line": 276,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNonEmpty",
          "range": [
            10209,
            10223
          ],
          "loc": {
            "start": {
              "line": 277,
              "column": 16
            },
            "end": {
              "line": 277,
              "column": 30
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              10224,
              10228
            ],
            "loc": {
              "start": {
                "line": 277,
                "column": 31
              },
              "end": {
                "line": 277,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              10230,
              10235
            ],
            "loc": {
              "start": {
                "line": 277,
                "column": 37
              },
              "end": {
                "line": 277,
                "column": 42
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              10237,
              10244
            ],
            "loc": {
              "start": {
                "line": 277,
                "column": 44
              },
              "end": {
                "line": 277,
                "column": 51
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyString",
                  "range": [
                    10252,
                    10264
                  ],
                  "loc": {
                    "start": {
                      "line": 278,
                      "column": 4
                    },
                    "end": {
                      "line": 278,
                      "column": 16
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      10265,
                      10269
                    ],
                    "loc": {
                      "start": {
                        "line": 278,
                        "column": 17
                      },
                      "end": {
                        "line": 278,
                        "column": 21
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      10271,
                      10276
                    ],
                    "loc": {
                      "start": {
                        "line": 278,
                        "column": 23
                      },
                      "end": {
                        "line": 278,
                        "column": 28
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      10278,
                      10285
                    ],
                    "loc": {
                      "start": {
                        "line": 278,
                        "column": 30
                      },
                      "end": {
                        "line": 278,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  10252,
                  10286
                ],
                "loc": {
                  "start": {
                    "line": 278,
                    "column": 4
                  },
                  "end": {
                    "line": 278,
                    "column": 38
                  }
                }
              },
              "range": [
                10252,
                10287
              ],
              "loc": {
                "start": {
                  "line": 278,
                  "column": 4
                },
                "end": {
                  "line": 278,
                  "column": 39
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    10296,
                    10301
                  ],
                  "loc": {
                    "start": {
                      "line": 279,
                      "column": 8
                    },
                    "end": {
                      "line": 279,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "",
                  "raw": "''",
                  "range": [
                    10306,
                    10308
                  ],
                  "loc": {
                    "start": {
                      "line": 279,
                      "column": 18
                    },
                    "end": {
                      "line": 279,
                      "column": 20
                    }
                  }
                },
                "range": [
                  10296,
                  10308
                ],
                "loc": {
                  "start": {
                    "line": 279,
                    "column": 8
                  },
                  "end": {
                    "line": 279,
                    "column": 20
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentEmptyStringError",
                        "range": [
                          10330,
                          10354
                        ],
                        "loc": {
                          "start": {
                            "line": 280,
                            "column": 18
                          },
                          "end": {
                            "line": 280,
                            "column": 42
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            10355,
                            10359
                          ],
                          "loc": {
                            "start": {
                              "line": 280,
                              "column": 43
                            },
                            "end": {
                              "line": 280,
                              "column": 47
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              10361,
                              10373
                            ],
                            "loc": {
                              "start": {
                                "line": 280,
                                "column": 49
                              },
                              "end": {
                                "line": 280,
                                "column": 61
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                10374,
                                10379
                              ],
                              "loc": {
                                "start": {
                                  "line": 280,
                                  "column": 62
                                },
                                "end": {
                                  "line": 280,
                                  "column": 67
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                10381,
                                10388
                              ],
                              "loc": {
                                "start": {
                                  "line": 280,
                                  "column": 69
                                },
                                "end": {
                                  "line": 280,
                                  "column": 76
                                }
                              }
                            }
                          ],
                          "range": [
                            10361,
                            10389
                          ],
                          "loc": {
                            "start": {
                              "line": 280,
                              "column": 49
                            },
                            "end": {
                              "line": 280,
                              "column": 77
                            }
                          }
                        }
                      ],
                      "range": [
                        10326,
                        10390
                      ],
                      "loc": {
                        "start": {
                          "line": 280,
                          "column": 14
                        },
                        "end": {
                          "line": 280,
                          "column": 78
                        }
                      }
                    },
                    "range": [
                      10320,
                      10391
                    ],
                    "loc": {
                      "start": {
                        "line": 280,
                        "column": 8
                      },
                      "end": {
                        "line": 280,
                        "column": 79
                      }
                    }
                  }
                ],
                "range": [
                  10310,
                  10397
                ],
                "loc": {
                  "start": {
                    "line": 279,
                    "column": 22
                  },
                  "end": {
                    "line": 281,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                10292,
                10397
              ],
              "loc": {
                "start": {
                  "line": 279,
                  "column": 4
                },
                "end": {
                  "line": 281,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            10246,
            10399
          ],
          "loc": {
            "start": {
              "line": 277,
              "column": 53
            },
            "end": {
              "line": 282,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          10200,
          10399
        ],
        "loc": {
          "start": {
            "line": 277,
            "column": 7
          },
          "end": {
            "line": 282,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
            "range": [
              8955,
              10192
            ],
            "loc": {
              "start": {
                "line": 243,
                "column": 0
              },
              "end": {
                "line": 276,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
            "range": [
              10400,
              11662
            ],
            "loc": {
              "start": {
                "line": 283,
                "column": 0
              },
              "end": {
                "line": 318,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        10193,
        10399
      ],
      "loc": {
        "start": {
          "line": 277,
          "column": 0
        },
        "end": {
          "line": 282,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
          "range": [
            8955,
            10192
          ],
          "loc": {
            "start": {
              "line": 243,
              "column": 0
            },
            "end": {
              "line": 276,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
          "range": [
            10400,
            11662
          ],
          "loc": {
            "start": {
              "line": 283,
              "column": 0
            },
            "end": {
              "line": 318,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNonZero",
          "range": [
            11679,
            11692
          ],
          "loc": {
            "start": {
              "line": 319,
              "column": 16
            },
            "end": {
              "line": 319,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              11693,
              11697
            ],
            "loc": {
              "start": {
                "line": 319,
                "column": 30
              },
              "end": {
                "line": 319,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              11699,
              11704
            ],
            "loc": {
              "start": {
                "line": 319,
                "column": 36
              },
              "end": {
                "line": 319,
                "column": 41
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              11706,
              11713
            ],
            "loc": {
              "start": {
                "line": 319,
                "column": 43
              },
              "end": {
                "line": 319,
                "column": 50
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyNumber",
                  "range": [
                    11721,
                    11733
                  ],
                  "loc": {
                    "start": {
                      "line": 320,
                      "column": 4
                    },
                    "end": {
                      "line": 320,
                      "column": 16
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      11734,
                      11738
                    ],
                    "loc": {
                      "start": {
                        "line": 320,
                        "column": 17
                      },
                      "end": {
                        "line": 320,
                        "column": 21
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      11740,
                      11745
                    ],
                    "loc": {
                      "start": {
                        "line": 320,
                        "column": 23
                      },
                      "end": {
                        "line": 320,
                        "column": 28
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      11747,
                      11754
                    ],
                    "loc": {
                      "start": {
                        "line": 320,
                        "column": 30
                      },
                      "end": {
                        "line": 320,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  11721,
                  11755
                ],
                "loc": {
                  "start": {
                    "line": 320,
                    "column": 4
                  },
                  "end": {
                    "line": 320,
                    "column": 38
                  }
                }
              },
              "range": [
                11721,
                11756
              ],
              "loc": {
                "start": {
                  "line": 320,
                  "column": 4
                },
                "end": {
                  "line": 320,
                  "column": 39
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    11765,
                    11770
                  ],
                  "loc": {
                    "start": {
                      "line": 321,
                      "column": 8
                    },
                    "end": {
                      "line": 321,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0",
                  "range": [
                    11775,
                    11776
                  ],
                  "loc": {
                    "start": {
                      "line": 321,
                      "column": 18
                    },
                    "end": {
                      "line": 321,
                      "column": 19
                    }
                  }
                },
                "range": [
                  11765,
                  11776
                ],
                "loc": {
                  "start": {
                    "line": 321,
                    "column": 8
                  },
                  "end": {
                    "line": 321,
                    "column": 19
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentZeroError",
                        "range": [
                          11798,
                          11815
                        ],
                        "loc": {
                          "start": {
                            "line": 322,
                            "column": 18
                          },
                          "end": {
                            "line": 322,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            11816,
                            11820
                          ],
                          "loc": {
                            "start": {
                              "line": 322,
                              "column": 36
                            },
                            "end": {
                              "line": 322,
                              "column": 40
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              11822,
                              11834
                            ],
                            "loc": {
                              "start": {
                                "line": 322,
                                "column": 42
                              },
                              "end": {
                                "line": 322,
                                "column": 54
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                11835,
                                11840
                              ],
                              "loc": {
                                "start": {
                                  "line": 322,
                                  "column": 55
                                },
                                "end": {
                                  "line": 322,
                                  "column": 60
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                11842,
                                11849
                              ],
                              "loc": {
                                "start": {
                                  "line": 322,
                                  "column": 62
                                },
                                "end": {
                                  "line": 322,
                                  "column": 69
                                }
                              }
                            }
                          ],
                          "range": [
                            11822,
                            11850
                          ],
                          "loc": {
                            "start": {
                              "line": 322,
                              "column": 42
                            },
                            "end": {
                              "line": 322,
                              "column": 70
                            }
                          }
                        }
                      ],
                      "range": [
                        11794,
                        11851
                      ],
                      "loc": {
                        "start": {
                          "line": 322,
                          "column": 14
                        },
                        "end": {
                          "line": 322,
                          "column": 71
                        }
                      }
                    },
                    "range": [
                      11788,
                      11852
                    ],
                    "loc": {
                      "start": {
                        "line": 322,
                        "column": 8
                      },
                      "end": {
                        "line": 322,
                        "column": 72
                      }
                    }
                  }
                ],
                "range": [
                  11778,
                  11858
                ],
                "loc": {
                  "start": {
                    "line": 321,
                    "column": 21
                  },
                  "end": {
                    "line": 323,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                11761,
                11858
              ],
              "loc": {
                "start": {
                  "line": 321,
                  "column": 4
                },
                "end": {
                  "line": 323,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            11715,
            11860
          ],
          "loc": {
            "start": {
              "line": 319,
              "column": 52
            },
            "end": {
              "line": 324,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          11670,
          11860
        ],
        "loc": {
          "start": {
            "line": 319,
            "column": 7
          },
          "end": {
            "line": 324,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
            "range": [
              10400,
              11662
            ],
            "loc": {
              "start": {
                "line": 283,
                "column": 0
              },
              "end": {
                "line": 318,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
            "range": [
              11861,
              13213
            ],
            "loc": {
              "start": {
                "line": 325,
                "column": 0
              },
              "end": {
                "line": 362,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        11663,
        11860
      ],
      "loc": {
        "start": {
          "line": 319,
          "column": 0
        },
        "end": {
          "line": 324,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
          "range": [
            10400,
            11662
          ],
          "loc": {
            "start": {
              "line": 283,
              "column": 0
            },
            "end": {
              "line": 318,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
          "range": [
            11861,
            13213
          ],
          "loc": {
            "start": {
              "line": 325,
              "column": 0
            },
            "end": {
              "line": 362,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNotNull",
          "range": [
            13230,
            13243
          ],
          "loc": {
            "start": {
              "line": 363,
              "column": 16
            },
            "end": {
              "line": 363,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              13244,
              13248
            ],
            "loc": {
              "start": {
                "line": 363,
                "column": 30
              },
              "end": {
                "line": 363,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              13250,
              13255
            ],
            "loc": {
              "start": {
                "line": 363,
                "column": 36
              },
              "end": {
                "line": 363,
                "column": 41
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              13257,
              13264
            ],
            "loc": {
              "start": {
                "line": 363,
                "column": 43
              },
              "end": {
                "line": 363,
                "column": 50
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    13272,
                    13285
                  ],
                  "loc": {
                    "start": {
                      "line": 364,
                      "column": 4
                    },
                    "end": {
                      "line": 364,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      13286,
                      13290
                    ],
                    "loc": {
                      "start": {
                        "line": 364,
                        "column": 18
                      },
                      "end": {
                        "line": 364,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      13292,
                      13297
                    ],
                    "loc": {
                      "start": {
                        "line": 364,
                        "column": 24
                      },
                      "end": {
                        "line": 364,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      13299,
                      13306
                    ],
                    "loc": {
                      "start": {
                        "line": 364,
                        "column": 31
                      },
                      "end": {
                        "line": 364,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  13272,
                  13307
                ],
                "loc": {
                  "start": {
                    "line": 364,
                    "column": 4
                  },
                  "end": {
                    "line": 364,
                    "column": 39
                  }
                }
              },
              "range": [
                13272,
                13308
              ],
              "loc": {
                "start": {
                  "line": 364,
                  "column": 4
                },
                "end": {
                  "line": 364,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    13317,
                    13322
                  ],
                  "loc": {
                    "start": {
                      "line": 365,
                      "column": 8
                    },
                    "end": {
                      "line": 365,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": null,
                  "raw": "null",
                  "range": [
                    13327,
                    13331
                  ],
                  "loc": {
                    "start": {
                      "line": 365,
                      "column": 18
                    },
                    "end": {
                      "line": 365,
                      "column": 22
                    }
                  }
                },
                "range": [
                  13317,
                  13331
                ],
                "loc": {
                  "start": {
                    "line": 365,
                    "column": 8
                  },
                  "end": {
                    "line": 365,
                    "column": 22
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentNullError",
                        "range": [
                          13353,
                          13370
                        ],
                        "loc": {
                          "start": {
                            "line": 366,
                            "column": 18
                          },
                          "end": {
                            "line": 366,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            13371,
                            13375
                          ],
                          "loc": {
                            "start": {
                              "line": 366,
                              "column": 36
                            },
                            "end": {
                              "line": 366,
                              "column": 40
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              13377,
                              13389
                            ],
                            "loc": {
                              "start": {
                                "line": 366,
                                "column": 42
                              },
                              "end": {
                                "line": 366,
                                "column": 54
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                13390,
                                13395
                              ],
                              "loc": {
                                "start": {
                                  "line": 366,
                                  "column": 55
                                },
                                "end": {
                                  "line": 366,
                                  "column": 60
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                13397,
                                13404
                              ],
                              "loc": {
                                "start": {
                                  "line": 366,
                                  "column": 62
                                },
                                "end": {
                                  "line": 366,
                                  "column": 69
                                }
                              }
                            }
                          ],
                          "range": [
                            13377,
                            13405
                          ],
                          "loc": {
                            "start": {
                              "line": 366,
                              "column": 42
                            },
                            "end": {
                              "line": 366,
                              "column": 70
                            }
                          }
                        }
                      ],
                      "range": [
                        13349,
                        13406
                      ],
                      "loc": {
                        "start": {
                          "line": 366,
                          "column": 14
                        },
                        "end": {
                          "line": 366,
                          "column": 71
                        }
                      }
                    },
                    "range": [
                      13343,
                      13407
                    ],
                    "loc": {
                      "start": {
                        "line": 366,
                        "column": 8
                      },
                      "end": {
                        "line": 366,
                        "column": 72
                      }
                    }
                  }
                ],
                "range": [
                  13333,
                  13413
                ],
                "loc": {
                  "start": {
                    "line": 365,
                    "column": 24
                  },
                  "end": {
                    "line": 367,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                13313,
                13413
              ],
              "loc": {
                "start": {
                  "line": 365,
                  "column": 4
                },
                "end": {
                  "line": 367,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            13266,
            13415
          ],
          "loc": {
            "start": {
              "line": 363,
              "column": 52
            },
            "end": {
              "line": 368,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          13221,
          13415
        ],
        "loc": {
          "start": {
            "line": 363,
            "column": 7
          },
          "end": {
            "line": 368,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
            "range": [
              11861,
              13213
            ],
            "loc": {
              "start": {
                "line": 325,
                "column": 0
              },
              "end": {
                "line": 362,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
            "range": [
              13416,
              14816
            ],
            "loc": {
              "start": {
                "line": 369,
                "column": 0
              },
              "end": {
                "line": 405,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        13214,
        13415
      ],
      "loc": {
        "start": {
          "line": 363,
          "column": 0
        },
        "end": {
          "line": 368,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
          "range": [
            11861,
            13213
          ],
          "loc": {
            "start": {
              "line": 325,
              "column": 0
            },
            "end": {
              "line": 362,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
          "range": [
            13416,
            14816
          ],
          "loc": {
            "start": {
              "line": 369,
              "column": 0
            },
            "end": {
              "line": 405,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNotWhitespace",
          "range": [
            14833,
            14852
          ],
          "loc": {
            "start": {
              "line": 406,
              "column": 16
            },
            "end": {
              "line": 406,
              "column": 35
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              14853,
              14857
            ],
            "loc": {
              "start": {
                "line": 406,
                "column": 36
              },
              "end": {
                "line": 406,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              14859,
              14864
            ],
            "loc": {
              "start": {
                "line": 406,
                "column": 42
              },
              "end": {
                "line": 406,
                "column": 47
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              14866,
              14873
            ],
            "loc": {
              "start": {
                "line": 406,
                "column": 49
              },
              "end": {
                "line": 406,
                "column": 56
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyNonEmpty",
                  "range": [
                    14881,
                    14895
                  ],
                  "loc": {
                    "start": {
                      "line": 407,
                      "column": 4
                    },
                    "end": {
                      "line": 407,
                      "column": 18
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      14896,
                      14900
                    ],
                    "loc": {
                      "start": {
                        "line": 407,
                        "column": 19
                      },
                      "end": {
                        "line": 407,
                        "column": 23
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      14902,
                      14907
                    ],
                    "loc": {
                      "start": {
                        "line": 407,
                        "column": 25
                      },
                      "end": {
                        "line": 407,
                        "column": 30
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      14909,
                      14916
                    ],
                    "loc": {
                      "start": {
                        "line": 407,
                        "column": 32
                      },
                      "end": {
                        "line": 407,
                        "column": 39
                      }
                    }
                  }
                ],
                "range": [
                  14881,
                  14917
                ],
                "loc": {
                  "start": {
                    "line": 407,
                    "column": 4
                  },
                  "end": {
                    "line": 407,
                    "column": 40
                  }
                }
              },
              "range": [
                14881,
                14918
              ],
              "loc": {
                "start": {
                  "line": 407,
                  "column": 4
                },
                "end": {
                  "line": 407,
                  "column": 41
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "value",
                      "range": [
                        14927,
                        14932
                      ],
                      "loc": {
                        "start": {
                          "line": 408,
                          "column": 8
                        },
                        "end": {
                          "line": 408,
                          "column": 13
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "trim",
                      "range": [
                        14933,
                        14937
                      ],
                      "loc": {
                        "start": {
                          "line": 408,
                          "column": 14
                        },
                        "end": {
                          "line": 408,
                          "column": 18
                        }
                      }
                    },
                    "range": [
                      14927,
                      14937
                    ],
                    "loc": {
                      "start": {
                        "line": 408,
                        "column": 8
                      },
                      "end": {
                        "line": 408,
                        "column": 18
                      }
                    }
                  },
                  "arguments": [],
                  "range": [
                    14927,
                    14939
                  ],
                  "loc": {
                    "start": {
                      "line": 408,
                      "column": 8
                    },
                    "end": {
                      "line": 408,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "",
                  "raw": "''",
                  "range": [
                    14944,
                    14946
                  ],
                  "loc": {
                    "start": {
                      "line": 408,
                      "column": 25
                    },
                    "end": {
                      "line": 408,
                      "column": 27
                    }
                  }
                },
                "range": [
                  14927,
                  14946
                ],
                "loc": {
                  "start": {
                    "line": 408,
                    "column": 8
                  },
                  "end": {
                    "line": 408,
                    "column": 27
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentWhitespaceStringError",
                        "range": [
                          14968,
                          14997
                        ],
                        "loc": {
                          "start": {
                            "line": 409,
                            "column": 18
                          },
                          "end": {
                            "line": 409,
                            "column": 47
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            14998,
                            15002
                          ],
                          "loc": {
                            "start": {
                              "line": 409,
                              "column": 48
                            },
                            "end": {
                              "line": 409,
                              "column": 52
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              15004,
                              15016
                            ],
                            "loc": {
                              "start": {
                                "line": 409,
                                "column": 54
                              },
                              "end": {
                                "line": 409,
                                "column": 66
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                15017,
                                15022
                              ],
                              "loc": {
                                "start": {
                                  "line": 409,
                                  "column": 67
                                },
                                "end": {
                                  "line": 409,
                                  "column": 72
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                15024,
                                15031
                              ],
                              "loc": {
                                "start": {
                                  "line": 409,
                                  "column": 74
                                },
                                "end": {
                                  "line": 409,
                                  "column": 81
                                }
                              }
                            }
                          ],
                          "range": [
                            15004,
                            15032
                          ],
                          "loc": {
                            "start": {
                              "line": 409,
                              "column": 54
                            },
                            "end": {
                              "line": 409,
                              "column": 82
                            }
                          }
                        }
                      ],
                      "range": [
                        14964,
                        15033
                      ],
                      "loc": {
                        "start": {
                          "line": 409,
                          "column": 14
                        },
                        "end": {
                          "line": 409,
                          "column": 83
                        }
                      }
                    },
                    "range": [
                      14958,
                      15034
                    ],
                    "loc": {
                      "start": {
                        "line": 409,
                        "column": 8
                      },
                      "end": {
                        "line": 409,
                        "column": 84
                      }
                    }
                  }
                ],
                "range": [
                  14948,
                  15040
                ],
                "loc": {
                  "start": {
                    "line": 408,
                    "column": 29
                  },
                  "end": {
                    "line": 410,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                14923,
                15040
              ],
              "loc": {
                "start": {
                  "line": 408,
                  "column": 4
                },
                "end": {
                  "line": 410,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            14875,
            15042
          ],
          "loc": {
            "start": {
              "line": 406,
              "column": 58
            },
            "end": {
              "line": 411,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          14824,
          15042
        ],
        "loc": {
          "start": {
            "line": 406,
            "column": 7
          },
          "end": {
            "line": 411,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
            "range": [
              13416,
              14816
            ],
            "loc": {
              "start": {
                "line": 369,
                "column": 0
              },
              "end": {
                "line": 405,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
            "range": [
              15043,
              16310
            ],
            "loc": {
              "start": {
                "line": 412,
                "column": 0
              },
              "end": {
                "line": 447,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        14817,
        15042
      ],
      "loc": {
        "start": {
          "line": 406,
          "column": 0
        },
        "end": {
          "line": 411,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
          "range": [
            13416,
            14816
          ],
          "loc": {
            "start": {
              "line": 369,
              "column": 0
            },
            "end": {
              "line": 405,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
          "range": [
            15043,
            16310
          ],
          "loc": {
            "start": {
              "line": 412,
              "column": 0
            },
            "end": {
              "line": 447,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNumber",
          "range": [
            16327,
            16339
          ],
          "loc": {
            "start": {
              "line": 448,
              "column": 16
            },
            "end": {
              "line": 448,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              16340,
              16344
            ],
            "loc": {
              "start": {
                "line": 448,
                "column": 29
              },
              "end": {
                "line": 448,
                "column": 33
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              16346,
              16351
            ],
            "loc": {
              "start": {
                "line": 448,
                "column": 35
              },
              "end": {
                "line": 448,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              16353,
              16360
            ],
            "loc": {
              "start": {
                "line": 448,
                "column": 42
              },
              "end": {
                "line": 448,
                "column": 49
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    16368,
                    16381
                  ],
                  "loc": {
                    "start": {
                      "line": 449,
                      "column": 4
                    },
                    "end": {
                      "line": 449,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      16382,
                      16386
                    ],
                    "loc": {
                      "start": {
                        "line": 449,
                        "column": 18
                      },
                      "end": {
                        "line": 449,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      16388,
                      16393
                    ],
                    "loc": {
                      "start": {
                        "line": 449,
                        "column": 24
                      },
                      "end": {
                        "line": 449,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      16395,
                      16402
                    ],
                    "loc": {
                      "start": {
                        "line": 449,
                        "column": 31
                      },
                      "end": {
                        "line": 449,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  16368,
                  16403
                ],
                "loc": {
                  "start": {
                    "line": 449,
                    "column": 4
                  },
                  "end": {
                    "line": 449,
                    "column": 39
                  }
                }
              },
              "range": [
                16368,
                16404
              ],
              "loc": {
                "start": {
                  "line": 449,
                  "column": 4
                },
                "end": {
                  "line": 449,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      16420,
                      16425
                    ],
                    "loc": {
                      "start": {
                        "line": 450,
                        "column": 15
                      },
                      "end": {
                        "line": 450,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    16413,
                    16425
                  ],
                  "loc": {
                    "start": {
                      "line": 450,
                      "column": 8
                    },
                    "end": {
                      "line": 450,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "number",
                  "raw": "'number'",
                  "range": [
                    16430,
                    16438
                  ],
                  "loc": {
                    "start": {
                      "line": 450,
                      "column": 25
                    },
                    "end": {
                      "line": 450,
                      "column": 33
                    }
                  }
                },
                "range": [
                  16413,
                  16438
                ],
                "loc": {
                  "start": {
                    "line": 450,
                    "column": 8
                  },
                  "end": {
                    "line": 450,
                    "column": 33
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          16460,
                          16477
                        ],
                        "loc": {
                          "start": {
                            "line": 451,
                            "column": 18
                          },
                          "end": {
                            "line": 451,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "number",
                          "raw": "'number'",
                          "range": [
                            16478,
                            16486
                          ],
                          "loc": {
                            "start": {
                              "line": 451,
                              "column": 36
                            },
                            "end": {
                              "line": 451,
                              "column": 44
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            16488,
                            16492
                          ],
                          "loc": {
                            "start": {
                              "line": 451,
                              "column": 46
                            },
                            "end": {
                              "line": 451,
                              "column": 50
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              16494,
                              16506
                            ],
                            "loc": {
                              "start": {
                                "line": 451,
                                "column": 52
                              },
                              "end": {
                                "line": 451,
                                "column": 64
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                16507,
                                16512
                              ],
                              "loc": {
                                "start": {
                                  "line": 451,
                                  "column": 65
                                },
                                "end": {
                                  "line": 451,
                                  "column": 70
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                16514,
                                16521
                              ],
                              "loc": {
                                "start": {
                                  "line": 451,
                                  "column": 72
                                },
                                "end": {
                                  "line": 451,
                                  "column": 79
                                }
                              }
                            }
                          ],
                          "range": [
                            16494,
                            16522
                          ],
                          "loc": {
                            "start": {
                              "line": 451,
                              "column": 52
                            },
                            "end": {
                              "line": 451,
                              "column": 80
                            }
                          }
                        }
                      ],
                      "range": [
                        16456,
                        16523
                      ],
                      "loc": {
                        "start": {
                          "line": 451,
                          "column": 14
                        },
                        "end": {
                          "line": 451,
                          "column": 81
                        }
                      }
                    },
                    "range": [
                      16450,
                      16524
                    ],
                    "loc": {
                      "start": {
                        "line": 451,
                        "column": 8
                      },
                      "end": {
                        "line": 451,
                        "column": 82
                      }
                    }
                  }
                ],
                "range": [
                  16440,
                  16530
                ],
                "loc": {
                  "start": {
                    "line": 450,
                    "column": 35
                  },
                  "end": {
                    "line": 452,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                16409,
                16530
              ],
              "loc": {
                "start": {
                  "line": 450,
                  "column": 4
                },
                "end": {
                  "line": 452,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Number",
                    "range": [
                      16539,
                      16545
                    ],
                    "loc": {
                      "start": {
                        "line": 453,
                        "column": 8
                      },
                      "end": {
                        "line": 453,
                        "column": 14
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "isNaN",
                    "range": [
                      16546,
                      16551
                    ],
                    "loc": {
                      "start": {
                        "line": 453,
                        "column": 15
                      },
                      "end": {
                        "line": 453,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    16539,
                    16551
                  ],
                  "loc": {
                    "start": {
                      "line": 453,
                      "column": 8
                    },
                    "end": {
                      "line": 453,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      16552,
                      16557
                    ],
                    "loc": {
                      "start": {
                        "line": 453,
                        "column": 21
                      },
                      "end": {
                        "line": 453,
                        "column": 26
                      }
                    }
                  }
                ],
                "range": [
                  16539,
                  16558
                ],
                "loc": {
                  "start": {
                    "line": 453,
                    "column": 8
                  },
                  "end": {
                    "line": 453,
                    "column": 27
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentNanError",
                        "range": [
                          16580,
                          16596
                        ],
                        "loc": {
                          "start": {
                            "line": 454,
                            "column": 18
                          },
                          "end": {
                            "line": 454,
                            "column": 34
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            16597,
                            16601
                          ],
                          "loc": {
                            "start": {
                              "line": 454,
                              "column": 35
                            },
                            "end": {
                              "line": 454,
                              "column": 39
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              16603,
                              16615
                            ],
                            "loc": {
                              "start": {
                                "line": 454,
                                "column": 41
                              },
                              "end": {
                                "line": 454,
                                "column": 53
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                16616,
                                16621
                              ],
                              "loc": {
                                "start": {
                                  "line": 454,
                                  "column": 54
                                },
                                "end": {
                                  "line": 454,
                                  "column": 59
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                16623,
                                16630
                              ],
                              "loc": {
                                "start": {
                                  "line": 454,
                                  "column": 61
                                },
                                "end": {
                                  "line": 454,
                                  "column": 68
                                }
                              }
                            }
                          ],
                          "range": [
                            16603,
                            16631
                          ],
                          "loc": {
                            "start": {
                              "line": 454,
                              "column": 41
                            },
                            "end": {
                              "line": 454,
                              "column": 69
                            }
                          }
                        }
                      ],
                      "range": [
                        16576,
                        16632
                      ],
                      "loc": {
                        "start": {
                          "line": 454,
                          "column": 14
                        },
                        "end": {
                          "line": 454,
                          "column": 70
                        }
                      }
                    },
                    "range": [
                      16570,
                      16633
                    ],
                    "loc": {
                      "start": {
                        "line": 454,
                        "column": 8
                      },
                      "end": {
                        "line": 454,
                        "column": 71
                      }
                    }
                  }
                ],
                "range": [
                  16560,
                  16639
                ],
                "loc": {
                  "start": {
                    "line": 453,
                    "column": 29
                  },
                  "end": {
                    "line": 455,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                16535,
                16639
              ],
              "loc": {
                "start": {
                  "line": 453,
                  "column": 4
                },
                "end": {
                  "line": 455,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            16362,
            16641
          ],
          "loc": {
            "start": {
              "line": 448,
              "column": 51
            },
            "end": {
              "line": 456,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          16318,
          16641
        ],
        "loc": {
          "start": {
            "line": 448,
            "column": 7
          },
          "end": {
            "line": 456,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
            "range": [
              15043,
              16310
            ],
            "loc": {
              "start": {
                "line": 412,
                "column": 0
              },
              "end": {
                "line": 447,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
            "range": [
              16642,
              17838
            ],
            "loc": {
              "start": {
                "line": 457,
                "column": 0
              },
              "end": {
                "line": 490,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        16311,
        16641
      ],
      "loc": {
        "start": {
          "line": 448,
          "column": 0
        },
        "end": {
          "line": 456,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
          "range": [
            15043,
            16310
          ],
          "loc": {
            "start": {
              "line": 412,
              "column": 0
            },
            "end": {
              "line": 447,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
          "range": [
            16642,
            17838
          ],
          "loc": {
            "start": {
              "line": 457,
              "column": 0
            },
            "end": {
              "line": 490,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyObject",
          "range": [
            17855,
            17867
          ],
          "loc": {
            "start": {
              "line": 491,
              "column": 16
            },
            "end": {
              "line": 491,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              17868,
              17872
            ],
            "loc": {
              "start": {
                "line": 491,
                "column": 29
              },
              "end": {
                "line": 491,
                "column": 33
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              17874,
              17879
            ],
            "loc": {
              "start": {
                "line": 491,
                "column": 35
              },
              "end": {
                "line": 491,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              17881,
              17888
            ],
            "loc": {
              "start": {
                "line": 491,
                "column": 42
              },
              "end": {
                "line": 491,
                "column": 49
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    17896,
                    17909
                  ],
                  "loc": {
                    "start": {
                      "line": 492,
                      "column": 4
                    },
                    "end": {
                      "line": 492,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      17910,
                      17914
                    ],
                    "loc": {
                      "start": {
                        "line": 492,
                        "column": 18
                      },
                      "end": {
                        "line": 492,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      17916,
                      17921
                    ],
                    "loc": {
                      "start": {
                        "line": 492,
                        "column": 24
                      },
                      "end": {
                        "line": 492,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      17923,
                      17930
                    ],
                    "loc": {
                      "start": {
                        "line": 492,
                        "column": 31
                      },
                      "end": {
                        "line": 492,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  17896,
                  17931
                ],
                "loc": {
                  "start": {
                    "line": 492,
                    "column": 4
                  },
                  "end": {
                    "line": 492,
                    "column": 39
                  }
                }
              },
              "range": [
                17896,
                17932
              ],
              "loc": {
                "start": {
                  "line": 492,
                  "column": 4
                },
                "end": {
                  "line": 492,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      17948,
                      17953
                    ],
                    "loc": {
                      "start": {
                        "line": 493,
                        "column": 15
                      },
                      "end": {
                        "line": 493,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    17941,
                    17953
                  ],
                  "loc": {
                    "start": {
                      "line": 493,
                      "column": 8
                    },
                    "end": {
                      "line": 493,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "object",
                  "raw": "'object'",
                  "range": [
                    17958,
                    17966
                  ],
                  "loc": {
                    "start": {
                      "line": 493,
                      "column": 25
                    },
                    "end": {
                      "line": 493,
                      "column": 33
                    }
                  }
                },
                "range": [
                  17941,
                  17966
                ],
                "loc": {
                  "start": {
                    "line": 493,
                    "column": 8
                  },
                  "end": {
                    "line": 493,
                    "column": 33
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          17988,
                          18005
                        ],
                        "loc": {
                          "start": {
                            "line": 494,
                            "column": 18
                          },
                          "end": {
                            "line": 494,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "object",
                          "raw": "'object'",
                          "range": [
                            18006,
                            18014
                          ],
                          "loc": {
                            "start": {
                              "line": 494,
                              "column": 36
                            },
                            "end": {
                              "line": 494,
                              "column": 44
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            18016,
                            18020
                          ],
                          "loc": {
                            "start": {
                              "line": 494,
                              "column": 46
                            },
                            "end": {
                              "line": 494,
                              "column": 50
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              18022,
                              18034
                            ],
                            "loc": {
                              "start": {
                                "line": 494,
                                "column": 52
                              },
                              "end": {
                                "line": 494,
                                "column": 64
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                18035,
                                18040
                              ],
                              "loc": {
                                "start": {
                                  "line": 494,
                                  "column": 65
                                },
                                "end": {
                                  "line": 494,
                                  "column": 70
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                18042,
                                18049
                              ],
                              "loc": {
                                "start": {
                                  "line": 494,
                                  "column": 72
                                },
                                "end": {
                                  "line": 494,
                                  "column": 79
                                }
                              }
                            }
                          ],
                          "range": [
                            18022,
                            18050
                          ],
                          "loc": {
                            "start": {
                              "line": 494,
                              "column": 52
                            },
                            "end": {
                              "line": 494,
                              "column": 80
                            }
                          }
                        }
                      ],
                      "range": [
                        17984,
                        18051
                      ],
                      "loc": {
                        "start": {
                          "line": 494,
                          "column": 14
                        },
                        "end": {
                          "line": 494,
                          "column": 81
                        }
                      }
                    },
                    "range": [
                      17978,
                      18052
                    ],
                    "loc": {
                      "start": {
                        "line": 494,
                        "column": 8
                      },
                      "end": {
                        "line": 494,
                        "column": 82
                      }
                    }
                  }
                ],
                "range": [
                  17968,
                  18058
                ],
                "loc": {
                  "start": {
                    "line": 493,
                    "column": 35
                  },
                  "end": {
                    "line": 495,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                17937,
                18058
              ],
              "loc": {
                "start": {
                  "line": 493,
                  "column": 4
                },
                "end": {
                  "line": 495,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            17890,
            18060
          ],
          "loc": {
            "start": {
              "line": 491,
              "column": 51
            },
            "end": {
              "line": 496,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          17846,
          18060
        ],
        "loc": {
          "start": {
            "line": 491,
            "column": 7
          },
          "end": {
            "line": 496,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
            "range": [
              16642,
              17838
            ],
            "loc": {
              "start": {
                "line": 457,
                "column": 0
              },
              "end": {
                "line": 490,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
            "range": [
              18061,
              19270
            ],
            "loc": {
              "start": {
                "line": 497,
                "column": 0
              },
              "end": {
                "line": 530,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        17839,
        18060
      ],
      "loc": {
        "start": {
          "line": 491,
          "column": 0
        },
        "end": {
          "line": 496,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
          "range": [
            16642,
            17838
          ],
          "loc": {
            "start": {
              "line": 457,
              "column": 0
            },
            "end": {
              "line": 490,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
          "range": [
            18061,
            19270
          ],
          "loc": {
            "start": {
              "line": 497,
              "column": 0
            },
            "end": {
              "line": 530,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyString",
          "range": [
            19287,
            19299
          ],
          "loc": {
            "start": {
              "line": 531,
              "column": 16
            },
            "end": {
              "line": 531,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              19300,
              19304
            ],
            "loc": {
              "start": {
                "line": 531,
                "column": 29
              },
              "end": {
                "line": 531,
                "column": 33
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              19306,
              19311
            ],
            "loc": {
              "start": {
                "line": 531,
                "column": 35
              },
              "end": {
                "line": 531,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              19313,
              19320
            ],
            "loc": {
              "start": {
                "line": 531,
                "column": 42
              },
              "end": {
                "line": 531,
                "column": 49
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    19328,
                    19341
                  ],
                  "loc": {
                    "start": {
                      "line": 532,
                      "column": 4
                    },
                    "end": {
                      "line": 532,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      19342,
                      19346
                    ],
                    "loc": {
                      "start": {
                        "line": 532,
                        "column": 18
                      },
                      "end": {
                        "line": 532,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      19348,
                      19353
                    ],
                    "loc": {
                      "start": {
                        "line": 532,
                        "column": 24
                      },
                      "end": {
                        "line": 532,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      19355,
                      19362
                    ],
                    "loc": {
                      "start": {
                        "line": 532,
                        "column": 31
                      },
                      "end": {
                        "line": 532,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  19328,
                  19363
                ],
                "loc": {
                  "start": {
                    "line": 532,
                    "column": 4
                  },
                  "end": {
                    "line": 532,
                    "column": 39
                  }
                }
              },
              "range": [
                19328,
                19364
              ],
              "loc": {
                "start": {
                  "line": 532,
                  "column": 4
                },
                "end": {
                  "line": 532,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      19380,
                      19385
                    ],
                    "loc": {
                      "start": {
                        "line": 533,
                        "column": 15
                      },
                      "end": {
                        "line": 533,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    19373,
                    19385
                  ],
                  "loc": {
                    "start": {
                      "line": 533,
                      "column": 8
                    },
                    "end": {
                      "line": 533,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "string",
                  "raw": "'string'",
                  "range": [
                    19390,
                    19398
                  ],
                  "loc": {
                    "start": {
                      "line": 533,
                      "column": 25
                    },
                    "end": {
                      "line": 533,
                      "column": 33
                    }
                  }
                },
                "range": [
                  19373,
                  19398
                ],
                "loc": {
                  "start": {
                    "line": 533,
                    "column": 8
                  },
                  "end": {
                    "line": 533,
                    "column": 33
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          19420,
                          19437
                        ],
                        "loc": {
                          "start": {
                            "line": 534,
                            "column": 18
                          },
                          "end": {
                            "line": 534,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "string",
                          "raw": "'string'",
                          "range": [
                            19438,
                            19446
                          ],
                          "loc": {
                            "start": {
                              "line": 534,
                              "column": 36
                            },
                            "end": {
                              "line": 534,
                              "column": 44
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            19448,
                            19452
                          ],
                          "loc": {
                            "start": {
                              "line": 534,
                              "column": 46
                            },
                            "end": {
                              "line": 534,
                              "column": 50
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              19454,
                              19466
                            ],
                            "loc": {
                              "start": {
                                "line": 534,
                                "column": 52
                              },
                              "end": {
                                "line": 534,
                                "column": 64
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                19467,
                                19472
                              ],
                              "loc": {
                                "start": {
                                  "line": 534,
                                  "column": 65
                                },
                                "end": {
                                  "line": 534,
                                  "column": 70
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                19474,
                                19481
                              ],
                              "loc": {
                                "start": {
                                  "line": 534,
                                  "column": 72
                                },
                                "end": {
                                  "line": 534,
                                  "column": 79
                                }
                              }
                            }
                          ],
                          "range": [
                            19454,
                            19482
                          ],
                          "loc": {
                            "start": {
                              "line": 534,
                              "column": 52
                            },
                            "end": {
                              "line": 534,
                              "column": 80
                            }
                          }
                        }
                      ],
                      "range": [
                        19416,
                        19483
                      ],
                      "loc": {
                        "start": {
                          "line": 534,
                          "column": 14
                        },
                        "end": {
                          "line": 534,
                          "column": 81
                        }
                      }
                    },
                    "range": [
                      19410,
                      19484
                    ],
                    "loc": {
                      "start": {
                        "line": 534,
                        "column": 8
                      },
                      "end": {
                        "line": 534,
                        "column": 82
                      }
                    }
                  }
                ],
                "range": [
                  19400,
                  19490
                ],
                "loc": {
                  "start": {
                    "line": 533,
                    "column": 35
                  },
                  "end": {
                    "line": 535,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                19369,
                19490
              ],
              "loc": {
                "start": {
                  "line": 533,
                  "column": 4
                },
                "end": {
                  "line": 535,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            19322,
            19492
          ],
          "loc": {
            "start": {
              "line": 531,
              "column": 51
            },
            "end": {
              "line": 536,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          19278,
          19492
        ],
        "loc": {
          "start": {
            "line": 531,
            "column": 7
          },
          "end": {
            "line": 536,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
            "range": [
              18061,
              19270
            ],
            "loc": {
              "start": {
                "line": 497,
                "column": 0
              },
              "end": {
                "line": 530,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              19493,
              20774
            ],
            "loc": {
              "start": {
                "line": 537,
                "column": 0
              },
              "end": {
                "line": 572,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        19271,
        19492
      ],
      "loc": {
        "start": {
          "line": 531,
          "column": 0
        },
        "end": {
          "line": 536,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
          "range": [
            18061,
            19270
          ],
          "loc": {
            "start": {
              "line": 497,
              "column": 0
            },
            "end": {
              "line": 530,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            19493,
            20774
          ],
          "loc": {
            "start": {
              "line": 537,
              "column": 0
            },
            "end": {
              "line": 572,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyTrue",
          "range": [
            20791,
            20801
          ],
          "loc": {
            "start": {
              "line": 573,
              "column": 16
            },
            "end": {
              "line": 573,
              "column": 26
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              20802,
              20806
            ],
            "loc": {
              "start": {
                "line": 573,
                "column": 27
              },
              "end": {
                "line": 573,
                "column": 31
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              20808,
              20813
            ],
            "loc": {
              "start": {
                "line": 573,
                "column": 33
              },
              "end": {
                "line": 573,
                "column": 38
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              20815,
              20822
            ],
            "loc": {
              "start": {
                "line": 573,
                "column": 40
              },
              "end": {
                "line": 573,
                "column": 47
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyBoolean",
                  "range": [
                    20830,
                    20843
                  ],
                  "loc": {
                    "start": {
                      "line": 574,
                      "column": 4
                    },
                    "end": {
                      "line": 574,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      20844,
                      20848
                    ],
                    "loc": {
                      "start": {
                        "line": 574,
                        "column": 18
                      },
                      "end": {
                        "line": 574,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      20850,
                      20855
                    ],
                    "loc": {
                      "start": {
                        "line": 574,
                        "column": 24
                      },
                      "end": {
                        "line": 574,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      20857,
                      20864
                    ],
                    "loc": {
                      "start": {
                        "line": 574,
                        "column": 31
                      },
                      "end": {
                        "line": 574,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  20830,
                  20865
                ],
                "loc": {
                  "start": {
                    "line": 574,
                    "column": 4
                  },
                  "end": {
                    "line": 574,
                    "column": 39
                  }
                }
              },
              "range": [
                20830,
                20866
              ],
              "loc": {
                "start": {
                  "line": 574,
                  "column": 4
                },
                "end": {
                  "line": 574,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    20875,
                    20880
                  ],
                  "loc": {
                    "start": {
                      "line": 575,
                      "column": 8
                    },
                    "end": {
                      "line": 575,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": false,
                  "raw": "false",
                  "range": [
                    20885,
                    20890
                  ],
                  "loc": {
                    "start": {
                      "line": 575,
                      "column": 18
                    },
                    "end": {
                      "line": 575,
                      "column": 23
                    }
                  }
                },
                "range": [
                  20875,
                  20890
                ],
                "loc": {
                  "start": {
                    "line": 575,
                    "column": 8
                  },
                  "end": {
                    "line": 575,
                    "column": 23
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentFalseError",
                        "range": [
                          20912,
                          20930
                        ],
                        "loc": {
                          "start": {
                            "line": 576,
                            "column": 18
                          },
                          "end": {
                            "line": 576,
                            "column": 36
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            20931,
                            20935
                          ],
                          "loc": {
                            "start": {
                              "line": 576,
                              "column": 37
                            },
                            "end": {
                              "line": 576,
                              "column": 41
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              20937,
                              20949
                            ],
                            "loc": {
                              "start": {
                                "line": 576,
                                "column": 43
                              },
                              "end": {
                                "line": 576,
                                "column": 55
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                20950,
                                20955
                              ],
                              "loc": {
                                "start": {
                                  "line": 576,
                                  "column": 56
                                },
                                "end": {
                                  "line": 576,
                                  "column": 61
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                20957,
                                20964
                              ],
                              "loc": {
                                "start": {
                                  "line": 576,
                                  "column": 63
                                },
                                "end": {
                                  "line": 576,
                                  "column": 70
                                }
                              }
                            }
                          ],
                          "range": [
                            20937,
                            20965
                          ],
                          "loc": {
                            "start": {
                              "line": 576,
                              "column": 43
                            },
                            "end": {
                              "line": 576,
                              "column": 71
                            }
                          }
                        }
                      ],
                      "range": [
                        20908,
                        20966
                      ],
                      "loc": {
                        "start": {
                          "line": 576,
                          "column": 14
                        },
                        "end": {
                          "line": 576,
                          "column": 72
                        }
                      }
                    },
                    "range": [
                      20902,
                      20967
                    ],
                    "loc": {
                      "start": {
                        "line": 576,
                        "column": 8
                      },
                      "end": {
                        "line": 576,
                        "column": 73
                      }
                    }
                  }
                ],
                "range": [
                  20892,
                  20973
                ],
                "loc": {
                  "start": {
                    "line": 575,
                    "column": 25
                  },
                  "end": {
                    "line": 577,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                20871,
                20973
              ],
              "loc": {
                "start": {
                  "line": 575,
                  "column": 4
                },
                "end": {
                  "line": 577,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            20824,
            20975
          ],
          "loc": {
            "start": {
              "line": 573,
              "column": 49
            },
            "end": {
              "line": 578,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          20782,
          20975
        ],
        "loc": {
          "start": {
            "line": 573,
            "column": 7
          },
          "end": {
            "line": 578,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              19493,
              20774
            ],
            "loc": {
              "start": {
                "line": 537,
                "column": 0
              },
              "end": {
                "line": 572,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
            "range": [
              20976,
              23398
            ],
            "loc": {
              "start": {
                "line": 579,
                "column": 0
              },
              "end": {
                "line": 638,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        20775,
        20975
      ],
      "loc": {
        "start": {
          "line": 573,
          "column": 0
        },
        "end": {
          "line": 578,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            19493,
            20774
          ],
          "loc": {
            "start": {
              "line": 537,
              "column": 0
            },
            "end": {
              "line": 572,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
          "range": [
            20976,
            23398
          ],
          "loc": {
            "start": {
              "line": 579,
              "column": 0
            },
            "end": {
              "line": 638,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyTruthy",
          "range": [
            23415,
            23427
          ],
          "loc": {
            "start": {
              "line": 639,
              "column": 16
            },
            "end": {
              "line": 639,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              23428,
              23432
            ],
            "loc": {
              "start": {
                "line": 639,
                "column": 29
              },
              "end": {
                "line": 639,
                "column": 33
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              23434,
              23439
            ],
            "loc": {
              "start": {
                "line": 639,
                "column": 35
              },
              "end": {
                "line": 639,
                "column": 40
              }
            }
          },
          {
            "type": "AssignmentPattern",
            "left": {
              "type": "Identifier",
              "name": "loose",
              "range": [
                23441,
                23446
              ],
              "loc": {
                "start": {
                  "line": 639,
                  "column": 42
                },
                "end": {
                  "line": 639,
                  "column": 47
                }
              }
            },
            "right": {
              "type": "Literal",
              "value": false,
              "raw": "false",
              "range": [
                23449,
                23454
              ],
              "loc": {
                "start": {
                  "line": 639,
                  "column": 50
                },
                "end": {
                  "line": 639,
                  "column": 55
                }
              }
            },
            "range": [
              23441,
              23454
            ],
            "loc": {
              "start": {
                "line": 639,
                "column": 42
              },
              "end": {
                "line": 639,
                "column": 55
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              23456,
              23463
            ],
            "loc": {
              "start": {
                "line": 639,
                "column": 57
              },
              "end": {
                "line": 639,
                "column": 64
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    23476,
                    23481
                  ],
                  "loc": {
                    "start": {
                      "line": 640,
                      "column": 9
                    },
                    "end": {
                      "line": 640,
                      "column": 14
                    }
                  }
                },
                "prefix": true,
                "range": [
                  23475,
                  23481
                ],
                "loc": {
                  "start": {
                    "line": 640,
                    "column": 8
                  },
                  "end": {
                    "line": 640,
                    "column": 14
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "Identifier",
                      "name": "loose",
                      "range": [
                        23497,
                        23502
                      ],
                      "loc": {
                        "start": {
                          "line": 641,
                          "column": 12
                        },
                        "end": {
                          "line": 641,
                          "column": 17
                        }
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ThrowStatement",
                          "argument": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "ArgumentFalsyError",
                              "range": [
                                23528,
                                23546
                              ],
                              "loc": {
                                "start": {
                                  "line": 642,
                                  "column": 22
                                },
                                "end": {
                                  "line": 642,
                                  "column": 40
                                }
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "name",
                                "range": [
                                  23547,
                                  23551
                                ],
                                "loc": {
                                  "start": {
                                    "line": 642,
                                    "column": 41
                                  },
                                  "end": {
                                    "line": 642,
                                    "column": 45
                                  }
                                }
                              },
                              {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "errorMessage",
                                  "range": [
                                    23553,
                                    23565
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 642,
                                      "column": 47
                                    },
                                    "end": {
                                      "line": 642,
                                      "column": 59
                                    }
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value",
                                    "range": [
                                      23566,
                                      23571
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 642,
                                        "column": 60
                                      },
                                      "end": {
                                        "line": 642,
                                        "column": 65
                                      }
                                    }
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "message",
                                    "range": [
                                      23573,
                                      23580
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 642,
                                        "column": 67
                                      },
                                      "end": {
                                        "line": 642,
                                        "column": 74
                                      }
                                    }
                                  }
                                ],
                                "range": [
                                  23553,
                                  23581
                                ],
                                "loc": {
                                  "start": {
                                    "line": 642,
                                    "column": 47
                                  },
                                  "end": {
                                    "line": 642,
                                    "column": 75
                                  }
                                }
                              }
                            ],
                            "range": [
                              23524,
                              23582
                            ],
                            "loc": {
                              "start": {
                                "line": 642,
                                "column": 18
                              },
                              "end": {
                                "line": 642,
                                "column": 76
                              }
                            }
                          },
                          "range": [
                            23518,
                            23583
                          ],
                          "loc": {
                            "start": {
                              "line": 642,
                              "column": 12
                            },
                            "end": {
                              "line": 642,
                              "column": 77
                            }
                          }
                        }
                      ],
                      "range": [
                        23504,
                        23593
                      ],
                      "loc": {
                        "start": {
                          "line": 641,
                          "column": 19
                        },
                        "end": {
                          "line": 643,
                          "column": 9
                        }
                      }
                    },
                    "alternate": null,
                    "range": [
                      23493,
                      23593
                    ],
                    "loc": {
                      "start": {
                        "line": 641,
                        "column": 8
                      },
                      "end": {
                        "line": 643,
                        "column": 9
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "verifyNotNull",
                        "range": [
                          23602,
                          23615
                        ],
                        "loc": {
                          "start": {
                            "line": 644,
                            "column": 8
                          },
                          "end": {
                            "line": 644,
                            "column": 21
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            23616,
                            23620
                          ],
                          "loc": {
                            "start": {
                              "line": 644,
                              "column": 22
                            },
                            "end": {
                              "line": 644,
                              "column": 26
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "value",
                          "range": [
                            23622,
                            23627
                          ],
                          "loc": {
                            "start": {
                              "line": 644,
                              "column": 28
                            },
                            "end": {
                              "line": 644,
                              "column": 33
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "message",
                          "range": [
                            23629,
                            23636
                          ],
                          "loc": {
                            "start": {
                              "line": 644,
                              "column": 35
                            },
                            "end": {
                              "line": 644,
                              "column": 42
                            }
                          }
                        }
                      ],
                      "range": [
                        23602,
                        23637
                      ],
                      "loc": {
                        "start": {
                          "line": 644,
                          "column": 8
                        },
                        "end": {
                          "line": 644,
                          "column": 43
                        }
                      }
                    },
                    "range": [
                      23602,
                      23638
                    ],
                    "loc": {
                      "start": {
                        "line": 644,
                        "column": 8
                      },
                      "end": {
                        "line": 644,
                        "column": 44
                      }
                    },
                    "trailingComments": [
                      {
                        "type": "Line",
                        "value": " Also checks for defined.",
                        "range": [
                          23639,
                          23666
                        ],
                        "loc": {
                          "start": {
                            "line": 644,
                            "column": 45
                          },
                          "end": {
                            "line": 644,
                            "column": 72
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "value",
                          "range": [
                            23686,
                            23691
                          ],
                          "loc": {
                            "start": {
                              "line": 645,
                              "column": 19
                            },
                            "end": {
                              "line": 645,
                              "column": 24
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          23679,
                          23691
                        ],
                        "loc": {
                          "start": {
                            "line": 645,
                            "column": 12
                          },
                          "end": {
                            "line": 645,
                            "column": 24
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": "boolean",
                        "raw": "'boolean'",
                        "range": [
                          23696,
                          23705
                        ],
                        "loc": {
                          "start": {
                            "line": 645,
                            "column": 29
                          },
                          "end": {
                            "line": 645,
                            "column": 38
                          }
                        }
                      },
                      "range": [
                        23679,
                        23705
                      ],
                      "loc": {
                        "start": {
                          "line": 645,
                          "column": 12
                        },
                        "end": {
                          "line": 645,
                          "column": 38
                        }
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "verifyTrue",
                              "range": [
                                23721,
                                23731
                              ],
                              "loc": {
                                "start": {
                                  "line": 646,
                                  "column": 12
                                },
                                "end": {
                                  "line": 646,
                                  "column": 22
                                }
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "name",
                                "range": [
                                  23732,
                                  23736
                                ],
                                "loc": {
                                  "start": {
                                    "line": 646,
                                    "column": 23
                                  },
                                  "end": {
                                    "line": 646,
                                    "column": 27
                                  }
                                }
                              },
                              {
                                "type": "Identifier",
                                "name": "value",
                                "range": [
                                  23738,
                                  23743
                                ],
                                "loc": {
                                  "start": {
                                    "line": 646,
                                    "column": 29
                                  },
                                  "end": {
                                    "line": 646,
                                    "column": 34
                                  }
                                }
                              },
                              {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "errorMessage",
                                  "range": [
                                    23745,
                                    23757
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 646,
                                      "column": 36
                                    },
                                    "end": {
                                      "line": 646,
                                      "column": 48
                                    }
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value",
                                    "range": [
                                      23758,
                                      23763
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 646,
                                        "column": 49
                                      },
                                      "end": {
                                        "line": 646,
                                        "column": 54
                                      }
                                    }
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "message",
                                    "range": [
                                      23765,
                                      23772
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 646,
                                        "column": 56
                                      },
                                      "end": {
                                        "line": 646,
                                        "column": 63
                                      }
                                    }
                                  }
                                ],
                                "range": [
                                  23745,
                                  23773
                                ],
                                "loc": {
                                  "start": {
                                    "line": 646,
                                    "column": 36
                                  },
                                  "end": {
                                    "line": 646,
                                    "column": 64
                                  }
                                }
                              }
                            ],
                            "range": [
                              23721,
                              23774
                            ],
                            "loc": {
                              "start": {
                                "line": 646,
                                "column": 12
                              },
                              "end": {
                                "line": 646,
                                "column": 65
                              }
                            }
                          },
                          "range": [
                            23721,
                            23775
                          ],
                          "loc": {
                            "start": {
                              "line": 646,
                              "column": 12
                            },
                            "end": {
                              "line": 646,
                              "column": 66
                            }
                          }
                        }
                      ],
                      "range": [
                        23707,
                        23785
                      ],
                      "loc": {
                        "start": {
                          "line": 645,
                          "column": 40
                        },
                        "end": {
                          "line": 647,
                          "column": 9
                        }
                      }
                    },
                    "alternate": {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "Identifier",
                            "name": "value",
                            "range": [
                              23810,
                              23815
                            ],
                            "loc": {
                              "start": {
                                "line": 648,
                                "column": 24
                              },
                              "end": {
                                "line": 648,
                                "column": 29
                              }
                            }
                          },
                          "prefix": true,
                          "range": [
                            23803,
                            23815
                          ],
                          "loc": {
                            "start": {
                              "line": 648,
                              "column": 17
                            },
                            "end": {
                              "line": 648,
                              "column": 29
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": "string",
                          "raw": "'string'",
                          "range": [
                            23820,
                            23828
                          ],
                          "loc": {
                            "start": {
                              "line": 648,
                              "column": 34
                            },
                            "end": {
                              "line": 648,
                              "column": 42
                            }
                          }
                        },
                        "range": [
                          23803,
                          23828
                        ],
                        "loc": {
                          "start": {
                            "line": 648,
                            "column": 17
                          },
                          "end": {
                            "line": 648,
                            "column": 42
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "verifyNonEmpty",
                                "range": [
                                  23844,
                                  23858
                                ],
                                "loc": {
                                  "start": {
                                    "line": 649,
                                    "column": 12
                                  },
                                  "end": {
                                    "line": 649,
                                    "column": 26
                                  }
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "name",
                                  "range": [
                                    23859,
                                    23863
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 649,
                                      "column": 27
                                    },
                                    "end": {
                                      "line": 649,
                                      "column": 31
                                    }
                                  }
                                },
                                {
                                  "type": "Identifier",
                                  "name": "value",
                                  "range": [
                                    23865,
                                    23870
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 649,
                                      "column": 33
                                    },
                                    "end": {
                                      "line": 649,
                                      "column": 38
                                    }
                                  }
                                },
                                {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "errorMessage",
                                    "range": [
                                      23872,
                                      23884
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 649,
                                        "column": 40
                                      },
                                      "end": {
                                        "line": 649,
                                        "column": 52
                                      }
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value",
                                      "range": [
                                        23885,
                                        23890
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 649,
                                          "column": 53
                                        },
                                        "end": {
                                          "line": 649,
                                          "column": 58
                                        }
                                      }
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "message",
                                      "range": [
                                        23892,
                                        23899
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 649,
                                          "column": 60
                                        },
                                        "end": {
                                          "line": 649,
                                          "column": 67
                                        }
                                      }
                                    }
                                  ],
                                  "range": [
                                    23872,
                                    23900
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 649,
                                      "column": 40
                                    },
                                    "end": {
                                      "line": 649,
                                      "column": 68
                                    }
                                  }
                                }
                              ],
                              "range": [
                                23844,
                                23901
                              ],
                              "loc": {
                                "start": {
                                  "line": 649,
                                  "column": 12
                                },
                                "end": {
                                  "line": 649,
                                  "column": 69
                                }
                              }
                            },
                            "range": [
                              23844,
                              23902
                            ],
                            "loc": {
                              "start": {
                                "line": 649,
                                "column": 12
                              },
                              "end": {
                                "line": 649,
                                "column": 70
                              }
                            }
                          }
                        ],
                        "range": [
                          23830,
                          23912
                        ],
                        "loc": {
                          "start": {
                            "line": 648,
                            "column": 44
                          },
                          "end": {
                            "line": 650,
                            "column": 9
                          }
                        }
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "typeof",
                            "argument": {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                23937,
                                23942
                              ],
                              "loc": {
                                "start": {
                                  "line": 651,
                                  "column": 24
                                },
                                "end": {
                                  "line": 651,
                                  "column": 29
                                }
                              }
                            },
                            "prefix": true,
                            "range": [
                              23930,
                              23942
                            ],
                            "loc": {
                              "start": {
                                "line": 651,
                                "column": 17
                              },
                              "end": {
                                "line": 651,
                                "column": 29
                              }
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": "number",
                            "raw": "'number'",
                            "range": [
                              23947,
                              23955
                            ],
                            "loc": {
                              "start": {
                                "line": 651,
                                "column": 34
                              },
                              "end": {
                                "line": 651,
                                "column": 42
                              }
                            }
                          },
                          "range": [
                            23930,
                            23955
                          ],
                          "loc": {
                            "start": {
                              "line": 651,
                              "column": 17
                            },
                            "end": {
                              "line": 651,
                              "column": 42
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "verifyNonZero",
                                  "range": [
                                    24010,
                                    24023
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 653,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 653,
                                      "column": 25
                                    }
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "name",
                                    "range": [
                                      24024,
                                      24028
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 653,
                                        "column": 26
                                      },
                                      "end": {
                                        "line": 653,
                                        "column": 30
                                      }
                                    }
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "value",
                                    "range": [
                                      24030,
                                      24035
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 653,
                                        "column": 32
                                      },
                                      "end": {
                                        "line": 653,
                                        "column": 37
                                      }
                                    }
                                  },
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "errorMessage",
                                      "range": [
                                        24037,
                                        24049
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 653,
                                          "column": 39
                                        },
                                        "end": {
                                          "line": 653,
                                          "column": 51
                                        }
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "value",
                                        "range": [
                                          24050,
                                          24055
                                        ],
                                        "loc": {
                                          "start": {
                                            "line": 653,
                                            "column": 52
                                          },
                                          "end": {
                                            "line": 653,
                                            "column": 57
                                          }
                                        }
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "message",
                                        "range": [
                                          24057,
                                          24064
                                        ],
                                        "loc": {
                                          "start": {
                                            "line": 653,
                                            "column": 59
                                          },
                                          "end": {
                                            "line": 653,
                                            "column": 66
                                          }
                                        }
                                      }
                                    ],
                                    "range": [
                                      24037,
                                      24065
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 653,
                                        "column": 39
                                      },
                                      "end": {
                                        "line": 653,
                                        "column": 67
                                      }
                                    }
                                  }
                                ],
                                "range": [
                                  24010,
                                  24066
                                ],
                                "loc": {
                                  "start": {
                                    "line": 653,
                                    "column": 12
                                  },
                                  "end": {
                                    "line": 653,
                                    "column": 68
                                  }
                                }
                              },
                              "range": [
                                24010,
                                24067
                              ],
                              "loc": {
                                "start": {
                                  "line": 653,
                                  "column": 12
                                },
                                "end": {
                                  "line": 653,
                                  "column": 69
                                }
                              },
                              "leadingComments": [
                                {
                                  "type": "Line",
                                  "value": " Also checks for not NaN",
                                  "range": [
                                    23971,
                                    23997
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 652,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 652,
                                      "column": 38
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "range": [
                            23957,
                            24077
                          ],
                          "loc": {
                            "start": {
                              "line": 651,
                              "column": 44
                            },
                            "end": {
                              "line": 654,
                              "column": 9
                            }
                          }
                        },
                        "alternate": null,
                        "range": [
                          23926,
                          24077
                        ],
                        "loc": {
                          "start": {
                            "line": 651,
                            "column": 13
                          },
                          "end": {
                            "line": 654,
                            "column": 9
                          }
                        }
                      },
                      "range": [
                        23799,
                        24077
                      ],
                      "loc": {
                        "start": {
                          "line": 648,
                          "column": 13
                        },
                        "end": {
                          "line": 654,
                          "column": 9
                        }
                      }
                    },
                    "range": [
                      23675,
                      24077
                    ],
                    "loc": {
                      "start": {
                        "line": 645,
                        "column": 8
                      },
                      "end": {
                        "line": 654,
                        "column": 9
                      }
                    },
                    "leadingComments": [
                      {
                        "type": "Line",
                        "value": " Also checks for defined.",
                        "range": [
                          23639,
                          23666
                        ],
                        "loc": {
                          "start": {
                            "line": 644,
                            "column": 45
                          },
                          "end": {
                            "line": 644,
                            "column": 72
                          }
                        }
                      }
                    ]
                  }
                ],
                "range": [
                  23483,
                  24083
                ],
                "loc": {
                  "start": {
                    "line": 640,
                    "column": 16
                  },
                  "end": {
                    "line": 655,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                23471,
                24083
              ],
              "loc": {
                "start": {
                  "line": 640,
                  "column": 4
                },
                "end": {
                  "line": 655,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            23465,
            24085
          ],
          "loc": {
            "start": {
              "line": 639,
              "column": 66
            },
            "end": {
              "line": 656,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          23406,
          24085
        ],
        "loc": {
          "start": {
            "line": 639,
            "column": 7
          },
          "end": {
            "line": 656,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
            "range": [
              20976,
              23398
            ],
            "loc": {
              "start": {
                "line": 579,
                "column": 0
              },
              "end": {
                "line": 638,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        23399,
        24085
      ],
      "loc": {
        "start": {
          "line": 639,
          "column": 0
        },
        "end": {
          "line": 656,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
          "range": [
            20976,
            23398
          ],
          "loc": {
            "start": {
              "line": 579,
              "column": 0
            },
            "end": {
              "line": 638,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "errorMessage",
        "range": [
          24095,
          24107
        ],
        "loc": {
          "start": {
            "line": 657,
            "column": 9
          },
          "end": {
            "line": 657,
            "column": 21
          }
        }
      },
      "params": [
        {
          "type": "Identifier",
          "name": "value",
          "range": [
            24108,
            24113
          ],
          "loc": {
            "start": {
              "line": 657,
              "column": 22
            },
            "end": {
              "line": 657,
              "column": 27
            }
          }
        },
        {
          "type": "Identifier",
          "name": "message",
          "range": [
            24115,
            24122
          ],
          "loc": {
            "start": {
              "line": 657,
              "column": 29
            },
            "end": {
              "line": 657,
              "column": 36
            }
          }
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      24145,
                      24152
                    ],
                    "loc": {
                      "start": {
                        "line": 658,
                        "column": 19
                      },
                      "end": {
                        "line": 658,
                        "column": 26
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    24138,
                    24152
                  ],
                  "loc": {
                    "start": {
                      "line": 658,
                      "column": 12
                    },
                    "end": {
                      "line": 658,
                      "column": 26
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "function",
                  "raw": "'function'",
                  "range": [
                    24157,
                    24167
                  ],
                  "loc": {
                    "start": {
                      "line": 658,
                      "column": 31
                    },
                    "end": {
                      "line": 658,
                      "column": 41
                    }
                  }
                },
                "range": [
                  24138,
                  24167
                ],
                "loc": {
                  "start": {
                    "line": 658,
                    "column": 12
                  },
                  "end": {
                    "line": 658,
                    "column": 41
                  }
                }
              },
              "consequent": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "message",
                  "range": [
                    24171,
                    24178
                  ],
                  "loc": {
                    "start": {
                      "line": 658,
                      "column": 45
                    },
                    "end": {
                      "line": 658,
                      "column": 52
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      24179,
                      24184
                    ],
                    "loc": {
                      "start": {
                        "line": 658,
                        "column": 53
                      },
                      "end": {
                        "line": 658,
                        "column": 58
                      }
                    }
                  }
                ],
                "range": [
                  24171,
                  24185
                ],
                "loc": {
                  "start": {
                    "line": 658,
                    "column": 45
                  },
                  "end": {
                    "line": 658,
                    "column": 59
                  }
                }
              },
              "alternate": {
                "type": "Identifier",
                "name": "message",
                "range": [
                  24188,
                  24195
                ],
                "loc": {
                  "start": {
                    "line": 658,
                    "column": 62
                  },
                  "end": {
                    "line": 658,
                    "column": 69
                  }
                }
              },
              "range": [
                24137,
                24195
              ],
              "loc": {
                "start": {
                  "line": 658,
                  "column": 11
                },
                "end": {
                  "line": 658,
                  "column": 69
                }
              }
            },
            "range": [
              24130,
              24196
            ],
            "loc": {
              "start": {
                "line": 658,
                "column": 4
              },
              "end": {
                "line": 658,
                "column": 70
              }
            }
          }
        ],
        "range": [
          24124,
          24198
        ],
        "loc": {
          "start": {
            "line": 657,
            "column": 38
          },
          "end": {
            "line": 659,
            "column": 1
          }
        }
      },
      "generator": false,
      "expression": false,
      "range": [
        24086,
        24198
      ],
      "loc": {
        "start": {
          "line": 657,
          "column": 0
        },
        "end": {
          "line": 659,
          "column": 1
        }
      }
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    24198
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 659,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value does not pass the specified test.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {!function(value: T) => boolean} test -\n *    Evaluates whether the value meets expectations.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentError}\n *    The test failed.\n *\n * @example <caption>verify that parameter deposit is non-negative</caption>\n * verifyArgument('deposit', deposit, arg => arg > 0.0);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, examples ④ & ⑤</a>\n * @see {@link ArgumentError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        638,
        1832
      ],
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 43,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
      "range": [
        1995,
        3213
      ],
      "loc": {
        "start": {
          "line": 49,
          "column": 0
        },
        "end": {
          "line": 83,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        3430,
        4572
      ],
      "loc": {
        "start": {
          "line": 90,
          "column": 0
        },
        "end": {
          "line": 121,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        4798,
        5909
      ],
      "loc": {
        "start": {
          "line": 128,
          "column": 0
        },
        "end": {
          "line": 158,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        6081,
        7237
      ],
      "loc": {
        "start": {
          "line": 164,
          "column": 0
        },
        "end": {
          "line": 195,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
      "range": [
        7466,
        8724
      ],
      "loc": {
        "start": {
          "line": 202,
          "column": 0
        },
        "end": {
          "line": 236,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
      "range": [
        8955,
        10192
      ],
      "loc": {
        "start": {
          "line": 243,
          "column": 0
        },
        "end": {
          "line": 276,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
      "range": [
        10400,
        11662
      ],
      "loc": {
        "start": {
          "line": 283,
          "column": 0
        },
        "end": {
          "line": 318,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
      "range": [
        11861,
        13213
      ],
      "loc": {
        "start": {
          "line": 325,
          "column": 0
        },
        "end": {
          "line": 362,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
      "range": [
        13416,
        14816
      ],
      "loc": {
        "start": {
          "line": 369,
          "column": 0
        },
        "end": {
          "line": 405,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
      "range": [
        15043,
        16310
      ],
      "loc": {
        "start": {
          "line": 412,
          "column": 0
        },
        "end": {
          "line": 447,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
      "range": [
        16642,
        17838
      ],
      "loc": {
        "start": {
          "line": 457,
          "column": 0
        },
        "end": {
          "line": 490,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
      "range": [
        18061,
        19270
      ],
      "loc": {
        "start": {
          "line": 497,
          "column": 0
        },
        "end": {
          "line": 530,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        19493,
        20774
      ],
      "loc": {
        "start": {
          "line": 537,
          "column": 0
        },
        "end": {
          "line": 572,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_util_errors\">\n *    Example method <code>jali_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
      "range": [
        20976,
        23398
      ],
      "loc": {
        "start": {
          "line": 579,
          "column": 0
        },
        "end": {
          "line": 638,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": " Also checks for defined.",
      "range": [
        23639,
        23666
      ],
      "loc": {
        "start": {
          "line": 644,
          "column": 45
        },
        "end": {
          "line": 644,
          "column": 72
        }
      }
    },
    {
      "type": "Line",
      "value": " Also checks for not NaN",
      "range": [
        23971,
        23997
      ],
      "loc": {
        "start": {
          "line": 652,
          "column": 12
        },
        "end": {
          "line": 652,
          "column": 38
        }
      }
    }
  ]
}