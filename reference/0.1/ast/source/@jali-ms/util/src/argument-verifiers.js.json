{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportNamespaceSpecifier",
          "local": {
            "type": "Identifier",
            "name": "TypeGuards",
            "range": [
              12,
              22
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 12
              },
              "end": {
                "line": 1,
                "column": 22
              }
            }
          },
          "range": [
            7,
            22
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 7
            },
            "end": {
              "line": 1,
              "column": 22
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./type-guards",
        "raw": "'./type-guards'",
        "range": [
          28,
          43
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 43
          }
        }
      },
      "range": [
        0,
        44
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 44
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentEmptyStringError",
            "range": [
              52,
              76
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 7
              },
              "end": {
                "line": 2,
                "column": 31
              }
            }
          },
          "range": [
            52,
            76
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 7
            },
            "end": {
              "line": 2,
              "column": 31
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-empty-string-error",
        "raw": "'./argument-empty-string-error'",
        "range": [
          82,
          113
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 37
          },
          "end": {
            "line": 2,
            "column": 68
          }
        }
      },
      "range": [
        45,
        114
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 69
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentError",
            "range": [
              122,
              135
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 7
              },
              "end": {
                "line": 3,
                "column": 20
              }
            }
          },
          "range": [
            122,
            135
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 7
            },
            "end": {
              "line": 3,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-error",
        "raw": "'./argument-error'",
        "range": [
          141,
          159
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 26
          },
          "end": {
            "line": 3,
            "column": 44
          }
        }
      },
      "range": [
        115,
        160
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 45
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentFalseError",
            "range": [
              168,
              186
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 7
              },
              "end": {
                "line": 4,
                "column": 25
              }
            }
          },
          "range": [
            168,
            186
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 7
            },
            "end": {
              "line": 4,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-false-error",
        "raw": "'./argument-false-error'",
        "range": [
          192,
          216
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 31
          },
          "end": {
            "line": 4,
            "column": 55
          }
        }
      },
      "range": [
        161,
        217
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 56
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentFalsyError",
            "range": [
              225,
              243
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 7
              },
              "end": {
                "line": 5,
                "column": 25
              }
            }
          },
          "range": [
            225,
            243
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 7
            },
            "end": {
              "line": 5,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-falsy-error",
        "raw": "'./argument-falsy-error'",
        "range": [
          249,
          273
        ],
        "loc": {
          "start": {
            "line": 5,
            "column": 31
          },
          "end": {
            "line": 5,
            "column": 55
          }
        }
      },
      "range": [
        218,
        274
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 56
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentNanError",
            "range": [
              282,
              298
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 7
              },
              "end": {
                "line": 6,
                "column": 23
              }
            }
          },
          "range": [
            282,
            298
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 7
            },
            "end": {
              "line": 6,
              "column": 23
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-nan-error",
        "raw": "'./argument-nan-error'",
        "range": [
          304,
          326
        ],
        "loc": {
          "start": {
            "line": 6,
            "column": 29
          },
          "end": {
            "line": 6,
            "column": 51
          }
        }
      },
      "range": [
        275,
        327
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 52
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentNullError",
            "range": [
              335,
              352
            ],
            "loc": {
              "start": {
                "line": 7,
                "column": 7
              },
              "end": {
                "line": 7,
                "column": 24
              }
            }
          },
          "range": [
            335,
            352
          ],
          "loc": {
            "start": {
              "line": 7,
              "column": 7
            },
            "end": {
              "line": 7,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-null-error",
        "raw": "'./argument-null-error'",
        "range": [
          358,
          381
        ],
        "loc": {
          "start": {
            "line": 7,
            "column": 30
          },
          "end": {
            "line": 7,
            "column": 53
          }
        }
      },
      "range": [
        328,
        382
      ],
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 54
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentTypeError",
            "range": [
              390,
              407
            ],
            "loc": {
              "start": {
                "line": 8,
                "column": 7
              },
              "end": {
                "line": 8,
                "column": 24
              }
            }
          },
          "range": [
            390,
            407
          ],
          "loc": {
            "start": {
              "line": 8,
              "column": 7
            },
            "end": {
              "line": 8,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-type-error",
        "raw": "'./argument-type-error'",
        "range": [
          413,
          436
        ],
        "loc": {
          "start": {
            "line": 8,
            "column": 30
          },
          "end": {
            "line": 8,
            "column": 53
          }
        }
      },
      "range": [
        383,
        437
      ],
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 54
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentUndefinedError",
            "range": [
              445,
              467
            ],
            "loc": {
              "start": {
                "line": 9,
                "column": 7
              },
              "end": {
                "line": 9,
                "column": 29
              }
            }
          },
          "range": [
            445,
            467
          ],
          "loc": {
            "start": {
              "line": 9,
              "column": 7
            },
            "end": {
              "line": 9,
              "column": 29
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-undefined-error",
        "raw": "'./argument-undefined-error'",
        "range": [
          473,
          501
        ],
        "loc": {
          "start": {
            "line": 9,
            "column": 35
          },
          "end": {
            "line": 9,
            "column": 63
          }
        }
      },
      "range": [
        438,
        502
      ],
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 64
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentWhitespaceStringError",
            "range": [
              510,
              539
            ],
            "loc": {
              "start": {
                "line": 10,
                "column": 7
              },
              "end": {
                "line": 10,
                "column": 36
              }
            }
          },
          "range": [
            510,
            539
          ],
          "loc": {
            "start": {
              "line": 10,
              "column": 7
            },
            "end": {
              "line": 10,
              "column": 36
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-whitespace-string-error",
        "raw": "'./argument-whitespace-string-error'",
        "range": [
          545,
          581
        ],
        "loc": {
          "start": {
            "line": 10,
            "column": 42
          },
          "end": {
            "line": 10,
            "column": 78
          }
        }
      },
      "range": [
        503,
        582
      ],
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 79
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArgumentZeroError",
            "range": [
              590,
              607
            ],
            "loc": {
              "start": {
                "line": 11,
                "column": 7
              },
              "end": {
                "line": 11,
                "column": 24
              }
            }
          },
          "range": [
            590,
            607
          ],
          "loc": {
            "start": {
              "line": 11,
              "column": 7
            },
            "end": {
              "line": 11,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./argument-zero-error",
        "raw": "'./argument-zero-error'",
        "range": [
          613,
          636
        ],
        "loc": {
          "start": {
            "line": 11,
            "column": 30
          },
          "end": {
            "line": 11,
            "column": 53
          }
        }
      },
      "range": [
        583,
        637
      ],
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 11,
          "column": 54
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value does not pass the specified test.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {!function(value: T) => boolean} test -\n *    Evaluates whether the value meets expectations.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentError}\n *    The test failed.\n *\n * @example <caption>verify that parameter deposit is non-negative</caption>\n * verifyArgument('deposit', deposit, arg => arg > 0.0);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, examples ④ & ⑤</a>\n * @see {@link ArgumentError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            638,
            1844
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyArgument",
          "range": [
            1861,
            1875
          ],
          "loc": {
            "start": {
              "line": 44,
              "column": 16
            },
            "end": {
              "line": 44,
              "column": 30
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              1876,
              1880
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 31
              },
              "end": {
                "line": 44,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              1882,
              1887
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 37
              },
              "end": {
                "line": 44,
                "column": 42
              }
            }
          },
          {
            "type": "Identifier",
            "name": "test",
            "range": [
              1889,
              1893
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 44
              },
              "end": {
                "line": 44,
                "column": 48
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              1895,
              1902
            ],
            "loc": {
              "start": {
                "line": 44,
                "column": 50
              },
              "end": {
                "line": 44,
                "column": 57
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "test",
                    "range": [
                      1915,
                      1919
                    ],
                    "loc": {
                      "start": {
                        "line": 45,
                        "column": 9
                      },
                      "end": {
                        "line": 45,
                        "column": 13
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value",
                      "range": [
                        1920,
                        1925
                      ],
                      "loc": {
                        "start": {
                          "line": 45,
                          "column": 14
                        },
                        "end": {
                          "line": 45,
                          "column": 19
                        }
                      }
                    }
                  ],
                  "range": [
                    1915,
                    1926
                  ],
                  "loc": {
                    "start": {
                      "line": 45,
                      "column": 9
                    },
                    "end": {
                      "line": 45,
                      "column": 20
                    }
                  }
                },
                "prefix": true,
                "range": [
                  1914,
                  1926
                ],
                "loc": {
                  "start": {
                    "line": 45,
                    "column": 8
                  },
                  "end": {
                    "line": 45,
                    "column": 20
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentError",
                        "range": [
                          1948,
                          1961
                        ],
                        "loc": {
                          "start": {
                            "line": 46,
                            "column": 18
                          },
                          "end": {
                            "line": 46,
                            "column": 31
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            1962,
                            1966
                          ],
                          "loc": {
                            "start": {
                              "line": 46,
                              "column": 32
                            },
                            "end": {
                              "line": 46,
                              "column": 36
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              1968,
                              1980
                            ],
                            "loc": {
                              "start": {
                                "line": 46,
                                "column": 38
                              },
                              "end": {
                                "line": 46,
                                "column": 50
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                1981,
                                1986
                              ],
                              "loc": {
                                "start": {
                                  "line": 46,
                                  "column": 51
                                },
                                "end": {
                                  "line": 46,
                                  "column": 56
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                1988,
                                1995
                              ],
                              "loc": {
                                "start": {
                                  "line": 46,
                                  "column": 58
                                },
                                "end": {
                                  "line": 46,
                                  "column": 65
                                }
                              }
                            }
                          ],
                          "range": [
                            1968,
                            1996
                          ],
                          "loc": {
                            "start": {
                              "line": 46,
                              "column": 38
                            },
                            "end": {
                              "line": 46,
                              "column": 66
                            }
                          }
                        }
                      ],
                      "range": [
                        1944,
                        1997
                      ],
                      "loc": {
                        "start": {
                          "line": 46,
                          "column": 14
                        },
                        "end": {
                          "line": 46,
                          "column": 67
                        }
                      }
                    },
                    "range": [
                      1938,
                      1998
                    ],
                    "loc": {
                      "start": {
                        "line": 46,
                        "column": 8
                      },
                      "end": {
                        "line": 46,
                        "column": 68
                      }
                    }
                  }
                ],
                "range": [
                  1928,
                  2004
                ],
                "loc": {
                  "start": {
                    "line": 45,
                    "column": 22
                  },
                  "end": {
                    "line": 47,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                1910,
                2004
              ],
              "loc": {
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 47,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            1904,
            2006
          ],
          "loc": {
            "start": {
              "line": 44,
              "column": 59
            },
            "end": {
              "line": 48,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1852,
          2006
        ],
        "loc": {
          "start": {
            "line": 44,
            "column": 7
          },
          "end": {
            "line": 48,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value does not pass the specified test.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {!function(value: T) => boolean} test -\n *    Evaluates whether the value meets expectations.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentError}\n *    The test failed.\n *\n * @example <caption>verify that parameter deposit is non-negative</caption>\n * verifyArgument('deposit', deposit, arg => arg > 0.0);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, examples ④ & ⑤</a>\n * @see {@link ArgumentError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              638,
              1844
            ],
            "loc": {
              "start": {
                "line": 12,
                "column": 0
              },
              "end": {
                "line": 43,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
            "range": [
              2007,
              3237
            ],
            "loc": {
              "start": {
                "line": 49,
                "column": 0
              },
              "end": {
                "line": 83,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1845,
        2006
      ],
      "loc": {
        "start": {
          "line": 44,
          "column": 0
        },
        "end": {
          "line": 48,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value does not pass the specified test.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {!function(value: T) => boolean} test -\n *    Evaluates whether the value meets expectations.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentError}\n *    The test failed.\n *\n * @example <caption>verify that parameter deposit is non-negative</caption>\n * verifyArgument('deposit', deposit, arg => arg > 0.0);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, examples ④ & ⑤</a>\n * @see {@link ArgumentError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            638,
            1844
          ],
          "loc": {
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
          "range": [
            2007,
            3237
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 0
            },
            "end": {
              "line": 83,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyArray",
          "range": [
            3254,
            3265
          ],
          "loc": {
            "start": {
              "line": 84,
              "column": 16
            },
            "end": {
              "line": 84,
              "column": 27
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              3266,
              3270
            ],
            "loc": {
              "start": {
                "line": 84,
                "column": 28
              },
              "end": {
                "line": 84,
                "column": 32
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              3272,
              3277
            ],
            "loc": {
              "start": {
                "line": 84,
                "column": 34
              },
              "end": {
                "line": 84,
                "column": 39
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              3279,
              3286
            ],
            "loc": {
              "start": {
                "line": 84,
                "column": 41
              },
              "end": {
                "line": 84,
                "column": 48
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    3294,
                    3307
                  ],
                  "loc": {
                    "start": {
                      "line": 85,
                      "column": 4
                    },
                    "end": {
                      "line": 85,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      3308,
                      3312
                    ],
                    "loc": {
                      "start": {
                        "line": 85,
                        "column": 18
                      },
                      "end": {
                        "line": 85,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      3314,
                      3319
                    ],
                    "loc": {
                      "start": {
                        "line": 85,
                        "column": 24
                      },
                      "end": {
                        "line": 85,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      3321,
                      3328
                    ],
                    "loc": {
                      "start": {
                        "line": 85,
                        "column": 31
                      },
                      "end": {
                        "line": 85,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  3294,
                  3329
                ],
                "loc": {
                  "start": {
                    "line": 85,
                    "column": 4
                  },
                  "end": {
                    "line": 85,
                    "column": 39
                  }
                }
              },
              "range": [
                3294,
                3330
              ],
              "loc": {
                "start": {
                  "line": 85,
                  "column": 4
                },
                "end": {
                  "line": 85,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Array",
                      "range": [
                        3340,
                        3345
                      ],
                      "loc": {
                        "start": {
                          "line": 86,
                          "column": 9
                        },
                        "end": {
                          "line": 86,
                          "column": 14
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "isArray",
                      "range": [
                        3346,
                        3353
                      ],
                      "loc": {
                        "start": {
                          "line": 86,
                          "column": 15
                        },
                        "end": {
                          "line": 86,
                          "column": 22
                        }
                      }
                    },
                    "range": [
                      3340,
                      3353
                    ],
                    "loc": {
                      "start": {
                        "line": 86,
                        "column": 9
                      },
                      "end": {
                        "line": 86,
                        "column": 22
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value",
                      "range": [
                        3354,
                        3359
                      ],
                      "loc": {
                        "start": {
                          "line": 86,
                          "column": 23
                        },
                        "end": {
                          "line": 86,
                          "column": 28
                        }
                      }
                    }
                  ],
                  "range": [
                    3340,
                    3360
                  ],
                  "loc": {
                    "start": {
                      "line": 86,
                      "column": 9
                    },
                    "end": {
                      "line": 86,
                      "column": 29
                    }
                  }
                },
                "prefix": true,
                "range": [
                  3339,
                  3360
                ],
                "loc": {
                  "start": {
                    "line": 86,
                    "column": 8
                  },
                  "end": {
                    "line": 86,
                    "column": 29
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          3382,
                          3399
                        ],
                        "loc": {
                          "start": {
                            "line": 87,
                            "column": 18
                          },
                          "end": {
                            "line": 87,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "Array",
                          "raw": "'Array'",
                          "range": [
                            3400,
                            3407
                          ],
                          "loc": {
                            "start": {
                              "line": 87,
                              "column": 36
                            },
                            "end": {
                              "line": 87,
                              "column": 43
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            3409,
                            3413
                          ],
                          "loc": {
                            "start": {
                              "line": 87,
                              "column": 45
                            },
                            "end": {
                              "line": 87,
                              "column": 49
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              3415,
                              3427
                            ],
                            "loc": {
                              "start": {
                                "line": 87,
                                "column": 51
                              },
                              "end": {
                                "line": 87,
                                "column": 63
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                3428,
                                3433
                              ],
                              "loc": {
                                "start": {
                                  "line": 87,
                                  "column": 64
                                },
                                "end": {
                                  "line": 87,
                                  "column": 69
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                3435,
                                3442
                              ],
                              "loc": {
                                "start": {
                                  "line": 87,
                                  "column": 71
                                },
                                "end": {
                                  "line": 87,
                                  "column": 78
                                }
                              }
                            }
                          ],
                          "range": [
                            3415,
                            3443
                          ],
                          "loc": {
                            "start": {
                              "line": 87,
                              "column": 51
                            },
                            "end": {
                              "line": 87,
                              "column": 79
                            }
                          }
                        }
                      ],
                      "range": [
                        3378,
                        3444
                      ],
                      "loc": {
                        "start": {
                          "line": 87,
                          "column": 14
                        },
                        "end": {
                          "line": 87,
                          "column": 80
                        }
                      }
                    },
                    "range": [
                      3372,
                      3445
                    ],
                    "loc": {
                      "start": {
                        "line": 87,
                        "column": 8
                      },
                      "end": {
                        "line": 87,
                        "column": 81
                      }
                    }
                  }
                ],
                "range": [
                  3362,
                  3451
                ],
                "loc": {
                  "start": {
                    "line": 86,
                    "column": 31
                  },
                  "end": {
                    "line": 88,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                3335,
                3451
              ],
              "loc": {
                "start": {
                  "line": 86,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            3288,
            3453
          ],
          "loc": {
            "start": {
              "line": 84,
              "column": 50
            },
            "end": {
              "line": 89,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          3245,
          3453
        ],
        "loc": {
          "start": {
            "line": 84,
            "column": 7
          },
          "end": {
            "line": 89,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
            "range": [
              2007,
              3237
            ],
            "loc": {
              "start": {
                "line": 49,
                "column": 0
              },
              "end": {
                "line": 83,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              3454,
              4608
            ],
            "loc": {
              "start": {
                "line": 90,
                "column": 0
              },
              "end": {
                "line": 121,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        3238,
        3453
      ],
      "loc": {
        "start": {
          "line": 84,
          "column": 0
        },
        "end": {
          "line": 89,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
          "range": [
            2007,
            3237
          ],
          "loc": {
            "start": {
              "line": 49,
              "column": 0
            },
            "end": {
              "line": 83,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            3454,
            4608
          ],
          "loc": {
            "start": {
              "line": 90,
              "column": 0
            },
            "end": {
              "line": 121,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyBoolean",
          "range": [
            4625,
            4638
          ],
          "loc": {
            "start": {
              "line": 122,
              "column": 16
            },
            "end": {
              "line": 122,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              4639,
              4643
            ],
            "loc": {
              "start": {
                "line": 122,
                "column": 30
              },
              "end": {
                "line": 122,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              4645,
              4650
            ],
            "loc": {
              "start": {
                "line": 122,
                "column": 36
              },
              "end": {
                "line": 122,
                "column": 41
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              4652,
              4659
            ],
            "loc": {
              "start": {
                "line": 122,
                "column": 43
              },
              "end": {
                "line": 122,
                "column": 50
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    4667,
                    4680
                  ],
                  "loc": {
                    "start": {
                      "line": 123,
                      "column": 4
                    },
                    "end": {
                      "line": 123,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      4681,
                      4685
                    ],
                    "loc": {
                      "start": {
                        "line": 123,
                        "column": 18
                      },
                      "end": {
                        "line": 123,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      4687,
                      4692
                    ],
                    "loc": {
                      "start": {
                        "line": 123,
                        "column": 24
                      },
                      "end": {
                        "line": 123,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      4694,
                      4701
                    ],
                    "loc": {
                      "start": {
                        "line": 123,
                        "column": 31
                      },
                      "end": {
                        "line": 123,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  4667,
                  4702
                ],
                "loc": {
                  "start": {
                    "line": 123,
                    "column": 4
                  },
                  "end": {
                    "line": 123,
                    "column": 39
                  }
                }
              },
              "range": [
                4667,
                4703
              ],
              "loc": {
                "start": {
                  "line": 123,
                  "column": 4
                },
                "end": {
                  "line": 123,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      4719,
                      4724
                    ],
                    "loc": {
                      "start": {
                        "line": 124,
                        "column": 15
                      },
                      "end": {
                        "line": 124,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    4712,
                    4724
                  ],
                  "loc": {
                    "start": {
                      "line": 124,
                      "column": 8
                    },
                    "end": {
                      "line": 124,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "boolean",
                  "raw": "'boolean'",
                  "range": [
                    4729,
                    4738
                  ],
                  "loc": {
                    "start": {
                      "line": 124,
                      "column": 25
                    },
                    "end": {
                      "line": 124,
                      "column": 34
                    }
                  }
                },
                "range": [
                  4712,
                  4738
                ],
                "loc": {
                  "start": {
                    "line": 124,
                    "column": 8
                  },
                  "end": {
                    "line": 124,
                    "column": 34
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          4760,
                          4777
                        ],
                        "loc": {
                          "start": {
                            "line": 125,
                            "column": 18
                          },
                          "end": {
                            "line": 125,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "boolean",
                          "raw": "'boolean'",
                          "range": [
                            4778,
                            4787
                          ],
                          "loc": {
                            "start": {
                              "line": 125,
                              "column": 36
                            },
                            "end": {
                              "line": 125,
                              "column": 45
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            4789,
                            4793
                          ],
                          "loc": {
                            "start": {
                              "line": 125,
                              "column": 47
                            },
                            "end": {
                              "line": 125,
                              "column": 51
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              4795,
                              4807
                            ],
                            "loc": {
                              "start": {
                                "line": 125,
                                "column": 53
                              },
                              "end": {
                                "line": 125,
                                "column": 65
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                4808,
                                4813
                              ],
                              "loc": {
                                "start": {
                                  "line": 125,
                                  "column": 66
                                },
                                "end": {
                                  "line": 125,
                                  "column": 71
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                4815,
                                4822
                              ],
                              "loc": {
                                "start": {
                                  "line": 125,
                                  "column": 73
                                },
                                "end": {
                                  "line": 125,
                                  "column": 80
                                }
                              }
                            }
                          ],
                          "range": [
                            4795,
                            4823
                          ],
                          "loc": {
                            "start": {
                              "line": 125,
                              "column": 53
                            },
                            "end": {
                              "line": 125,
                              "column": 81
                            }
                          }
                        }
                      ],
                      "range": [
                        4756,
                        4824
                      ],
                      "loc": {
                        "start": {
                          "line": 125,
                          "column": 14
                        },
                        "end": {
                          "line": 125,
                          "column": 82
                        }
                      }
                    },
                    "range": [
                      4750,
                      4825
                    ],
                    "loc": {
                      "start": {
                        "line": 125,
                        "column": 8
                      },
                      "end": {
                        "line": 125,
                        "column": 83
                      }
                    }
                  }
                ],
                "range": [
                  4740,
                  4831
                ],
                "loc": {
                  "start": {
                    "line": 124,
                    "column": 36
                  },
                  "end": {
                    "line": 126,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4708,
                4831
              ],
              "loc": {
                "start": {
                  "line": 124,
                  "column": 4
                },
                "end": {
                  "line": 126,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            4661,
            4833
          ],
          "loc": {
            "start": {
              "line": 122,
              "column": 52
            },
            "end": {
              "line": 127,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          4616,
          4833
        ],
        "loc": {
          "start": {
            "line": 122,
            "column": 7
          },
          "end": {
            "line": 127,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              3454,
              4608
            ],
            "loc": {
              "start": {
                "line": 90,
                "column": 0
              },
              "end": {
                "line": 121,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              4834,
              5957
            ],
            "loc": {
              "start": {
                "line": 128,
                "column": 0
              },
              "end": {
                "line": 158,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        4609,
        4833
      ],
      "loc": {
        "start": {
          "line": 122,
          "column": 0
        },
        "end": {
          "line": 127,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            3454,
            4608
          ],
          "loc": {
            "start": {
              "line": 90,
              "column": 0
            },
            "end": {
              "line": 121,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            4834,
            5957
          ],
          "loc": {
            "start": {
              "line": 128,
              "column": 0
            },
            "end": {
              "line": 158,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyDefined",
          "range": [
            5974,
            5987
          ],
          "loc": {
            "start": {
              "line": 159,
              "column": 16
            },
            "end": {
              "line": 159,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              5988,
              5992
            ],
            "loc": {
              "start": {
                "line": 159,
                "column": 30
              },
              "end": {
                "line": 159,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              5994,
              5999
            ],
            "loc": {
              "start": {
                "line": 159,
                "column": 36
              },
              "end": {
                "line": 159,
                "column": 41
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              6001,
              6008
            ],
            "loc": {
              "start": {
                "line": 159,
                "column": 43
              },
              "end": {
                "line": 159,
                "column": 50
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    6020,
                    6025
                  ],
                  "loc": {
                    "start": {
                      "line": 160,
                      "column": 8
                    },
                    "end": {
                      "line": 160,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "undefined",
                  "range": [
                    6030,
                    6039
                  ],
                  "loc": {
                    "start": {
                      "line": 160,
                      "column": 18
                    },
                    "end": {
                      "line": 160,
                      "column": 27
                    }
                  }
                },
                "range": [
                  6020,
                  6039
                ],
                "loc": {
                  "start": {
                    "line": 160,
                    "column": 8
                  },
                  "end": {
                    "line": 160,
                    "column": 27
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentUndefinedError",
                        "range": [
                          6061,
                          6083
                        ],
                        "loc": {
                          "start": {
                            "line": 161,
                            "column": 18
                          },
                          "end": {
                            "line": 161,
                            "column": 40
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            6084,
                            6088
                          ],
                          "loc": {
                            "start": {
                              "line": 161,
                              "column": 41
                            },
                            "end": {
                              "line": 161,
                              "column": 45
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              6090,
                              6102
                            ],
                            "loc": {
                              "start": {
                                "line": 161,
                                "column": 47
                              },
                              "end": {
                                "line": 161,
                                "column": 59
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                6103,
                                6108
                              ],
                              "loc": {
                                "start": {
                                  "line": 161,
                                  "column": 60
                                },
                                "end": {
                                  "line": 161,
                                  "column": 65
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                6110,
                                6117
                              ],
                              "loc": {
                                "start": {
                                  "line": 161,
                                  "column": 67
                                },
                                "end": {
                                  "line": 161,
                                  "column": 74
                                }
                              }
                            }
                          ],
                          "range": [
                            6090,
                            6118
                          ],
                          "loc": {
                            "start": {
                              "line": 161,
                              "column": 47
                            },
                            "end": {
                              "line": 161,
                              "column": 75
                            }
                          }
                        }
                      ],
                      "range": [
                        6057,
                        6119
                      ],
                      "loc": {
                        "start": {
                          "line": 161,
                          "column": 14
                        },
                        "end": {
                          "line": 161,
                          "column": 76
                        }
                      }
                    },
                    "range": [
                      6051,
                      6120
                    ],
                    "loc": {
                      "start": {
                        "line": 161,
                        "column": 8
                      },
                      "end": {
                        "line": 161,
                        "column": 77
                      }
                    }
                  }
                ],
                "range": [
                  6041,
                  6126
                ],
                "loc": {
                  "start": {
                    "line": 160,
                    "column": 29
                  },
                  "end": {
                    "line": 162,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                6016,
                6126
              ],
              "loc": {
                "start": {
                  "line": 160,
                  "column": 4
                },
                "end": {
                  "line": 162,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            6010,
            6128
          ],
          "loc": {
            "start": {
              "line": 159,
              "column": 52
            },
            "end": {
              "line": 163,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          5965,
          6128
        ],
        "loc": {
          "start": {
            "line": 159,
            "column": 7
          },
          "end": {
            "line": 163,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              4834,
              5957
            ],
            "loc": {
              "start": {
                "line": 128,
                "column": 0
              },
              "end": {
                "line": 158,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              6129,
              7297
            ],
            "loc": {
              "start": {
                "line": 164,
                "column": 0
              },
              "end": {
                "line": 195,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        5958,
        6128
      ],
      "loc": {
        "start": {
          "line": 159,
          "column": 0
        },
        "end": {
          "line": 163,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            4834,
            5957
          ],
          "loc": {
            "start": {
              "line": 128,
              "column": 0
            },
            "end": {
              "line": 158,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            6129,
            7297
          ],
          "loc": {
            "start": {
              "line": 164,
              "column": 0
            },
            "end": {
              "line": 195,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyFunction",
          "range": [
            7314,
            7328
          ],
          "loc": {
            "start": {
              "line": 196,
              "column": 16
            },
            "end": {
              "line": 196,
              "column": 30
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              7329,
              7333
            ],
            "loc": {
              "start": {
                "line": 196,
                "column": 31
              },
              "end": {
                "line": 196,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              7335,
              7340
            ],
            "loc": {
              "start": {
                "line": 196,
                "column": 37
              },
              "end": {
                "line": 196,
                "column": 42
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              7342,
              7349
            ],
            "loc": {
              "start": {
                "line": 196,
                "column": 44
              },
              "end": {
                "line": 196,
                "column": 51
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    7357,
                    7370
                  ],
                  "loc": {
                    "start": {
                      "line": 197,
                      "column": 4
                    },
                    "end": {
                      "line": 197,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      7371,
                      7375
                    ],
                    "loc": {
                      "start": {
                        "line": 197,
                        "column": 18
                      },
                      "end": {
                        "line": 197,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      7377,
                      7382
                    ],
                    "loc": {
                      "start": {
                        "line": 197,
                        "column": 24
                      },
                      "end": {
                        "line": 197,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      7384,
                      7391
                    ],
                    "loc": {
                      "start": {
                        "line": 197,
                        "column": 31
                      },
                      "end": {
                        "line": 197,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  7357,
                  7392
                ],
                "loc": {
                  "start": {
                    "line": 197,
                    "column": 4
                  },
                  "end": {
                    "line": 197,
                    "column": 39
                  }
                }
              },
              "range": [
                7357,
                7393
              ],
              "loc": {
                "start": {
                  "line": 197,
                  "column": 4
                },
                "end": {
                  "line": 197,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      7409,
                      7414
                    ],
                    "loc": {
                      "start": {
                        "line": 198,
                        "column": 15
                      },
                      "end": {
                        "line": 198,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    7402,
                    7414
                  ],
                  "loc": {
                    "start": {
                      "line": 198,
                      "column": 8
                    },
                    "end": {
                      "line": 198,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "function",
                  "raw": "'function'",
                  "range": [
                    7419,
                    7429
                  ],
                  "loc": {
                    "start": {
                      "line": 198,
                      "column": 25
                    },
                    "end": {
                      "line": 198,
                      "column": 35
                    }
                  }
                },
                "range": [
                  7402,
                  7429
                ],
                "loc": {
                  "start": {
                    "line": 198,
                    "column": 8
                  },
                  "end": {
                    "line": 198,
                    "column": 35
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          7451,
                          7468
                        ],
                        "loc": {
                          "start": {
                            "line": 199,
                            "column": 18
                          },
                          "end": {
                            "line": 199,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "function",
                          "raw": "'function'",
                          "range": [
                            7469,
                            7479
                          ],
                          "loc": {
                            "start": {
                              "line": 199,
                              "column": 36
                            },
                            "end": {
                              "line": 199,
                              "column": 46
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            7481,
                            7485
                          ],
                          "loc": {
                            "start": {
                              "line": 199,
                              "column": 48
                            },
                            "end": {
                              "line": 199,
                              "column": 52
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              7487,
                              7499
                            ],
                            "loc": {
                              "start": {
                                "line": 199,
                                "column": 54
                              },
                              "end": {
                                "line": 199,
                                "column": 66
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                7500,
                                7505
                              ],
                              "loc": {
                                "start": {
                                  "line": 199,
                                  "column": 67
                                },
                                "end": {
                                  "line": 199,
                                  "column": 72
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                7507,
                                7514
                              ],
                              "loc": {
                                "start": {
                                  "line": 199,
                                  "column": 74
                                },
                                "end": {
                                  "line": 199,
                                  "column": 81
                                }
                              }
                            }
                          ],
                          "range": [
                            7487,
                            7515
                          ],
                          "loc": {
                            "start": {
                              "line": 199,
                              "column": 54
                            },
                            "end": {
                              "line": 199,
                              "column": 82
                            }
                          }
                        }
                      ],
                      "range": [
                        7447,
                        7516
                      ],
                      "loc": {
                        "start": {
                          "line": 199,
                          "column": 14
                        },
                        "end": {
                          "line": 199,
                          "column": 83
                        }
                      }
                    },
                    "range": [
                      7441,
                      7517
                    ],
                    "loc": {
                      "start": {
                        "line": 199,
                        "column": 8
                      },
                      "end": {
                        "line": 199,
                        "column": 84
                      }
                    }
                  }
                ],
                "range": [
                  7431,
                  7523
                ],
                "loc": {
                  "start": {
                    "line": 198,
                    "column": 37
                  },
                  "end": {
                    "line": 200,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                7398,
                7523
              ],
              "loc": {
                "start": {
                  "line": 198,
                  "column": 4
                },
                "end": {
                  "line": 200,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            7351,
            7525
          ],
          "loc": {
            "start": {
              "line": 196,
              "column": 53
            },
            "end": {
              "line": 201,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          7305,
          7525
        ],
        "loc": {
          "start": {
            "line": 196,
            "column": 7
          },
          "end": {
            "line": 201,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              6129,
              7297
            ],
            "loc": {
              "start": {
                "line": 164,
                "column": 0
              },
              "end": {
                "line": 195,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
            "range": [
              7526,
              8796
            ],
            "loc": {
              "start": {
                "line": 202,
                "column": 0
              },
              "end": {
                "line": 236,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        7298,
        7525
      ],
      "loc": {
        "start": {
          "line": 196,
          "column": 0
        },
        "end": {
          "line": 201,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            6129,
            7297
          ],
          "loc": {
            "start": {
              "line": 164,
              "column": 0
            },
            "end": {
              "line": 195,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
          "range": [
            7526,
            8796
          ],
          "loc": {
            "start": {
              "line": 202,
              "column": 0
            },
            "end": {
              "line": 236,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyIterable",
          "range": [
            8813,
            8827
          ],
          "loc": {
            "start": {
              "line": 237,
              "column": 16
            },
            "end": {
              "line": 237,
              "column": 30
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              8828,
              8832
            ],
            "loc": {
              "start": {
                "line": 237,
                "column": 31
              },
              "end": {
                "line": 237,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              8834,
              8839
            ],
            "loc": {
              "start": {
                "line": 237,
                "column": 37
              },
              "end": {
                "line": 237,
                "column": 42
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              8841,
              8848
            ],
            "loc": {
              "start": {
                "line": 237,
                "column": 44
              },
              "end": {
                "line": 237,
                "column": 51
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    8856,
                    8869
                  ],
                  "loc": {
                    "start": {
                      "line": 238,
                      "column": 4
                    },
                    "end": {
                      "line": 238,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      8870,
                      8874
                    ],
                    "loc": {
                      "start": {
                        "line": 238,
                        "column": 18
                      },
                      "end": {
                        "line": 238,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      8876,
                      8881
                    ],
                    "loc": {
                      "start": {
                        "line": 238,
                        "column": 24
                      },
                      "end": {
                        "line": 238,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      8883,
                      8890
                    ],
                    "loc": {
                      "start": {
                        "line": 238,
                        "column": 31
                      },
                      "end": {
                        "line": 238,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  8856,
                  8891
                ],
                "loc": {
                  "start": {
                    "line": 238,
                    "column": 4
                  },
                  "end": {
                    "line": 238,
                    "column": 39
                  }
                }
              },
              "range": [
                8856,
                8892
              ],
              "loc": {
                "start": {
                  "line": 238,
                  "column": 4
                },
                "end": {
                  "line": 238,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "TypeGuards",
                      "range": [
                        8902,
                        8912
                      ],
                      "loc": {
                        "start": {
                          "line": 239,
                          "column": 9
                        },
                        "end": {
                          "line": 239,
                          "column": 19
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "isIterable",
                      "range": [
                        8913,
                        8923
                      ],
                      "loc": {
                        "start": {
                          "line": 239,
                          "column": 20
                        },
                        "end": {
                          "line": 239,
                          "column": 30
                        }
                      }
                    },
                    "range": [
                      8902,
                      8923
                    ],
                    "loc": {
                      "start": {
                        "line": 239,
                        "column": 9
                      },
                      "end": {
                        "line": 239,
                        "column": 30
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value",
                      "range": [
                        8924,
                        8929
                      ],
                      "loc": {
                        "start": {
                          "line": 239,
                          "column": 31
                        },
                        "end": {
                          "line": 239,
                          "column": 36
                        }
                      }
                    }
                  ],
                  "range": [
                    8902,
                    8930
                  ],
                  "loc": {
                    "start": {
                      "line": 239,
                      "column": 9
                    },
                    "end": {
                      "line": 239,
                      "column": 37
                    }
                  }
                },
                "prefix": true,
                "range": [
                  8901,
                  8930
                ],
                "loc": {
                  "start": {
                    "line": 239,
                    "column": 8
                  },
                  "end": {
                    "line": 239,
                    "column": 37
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          8952,
                          8969
                        ],
                        "loc": {
                          "start": {
                            "line": 240,
                            "column": 18
                          },
                          "end": {
                            "line": 240,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "iterable",
                          "raw": "'iterable'",
                          "range": [
                            8970,
                            8980
                          ],
                          "loc": {
                            "start": {
                              "line": 240,
                              "column": 36
                            },
                            "end": {
                              "line": 240,
                              "column": 46
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            8982,
                            8986
                          ],
                          "loc": {
                            "start": {
                              "line": 240,
                              "column": 48
                            },
                            "end": {
                              "line": 240,
                              "column": 52
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              8988,
                              9000
                            ],
                            "loc": {
                              "start": {
                                "line": 240,
                                "column": 54
                              },
                              "end": {
                                "line": 240,
                                "column": 66
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                9001,
                                9006
                              ],
                              "loc": {
                                "start": {
                                  "line": 240,
                                  "column": 67
                                },
                                "end": {
                                  "line": 240,
                                  "column": 72
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                9008,
                                9015
                              ],
                              "loc": {
                                "start": {
                                  "line": 240,
                                  "column": 74
                                },
                                "end": {
                                  "line": 240,
                                  "column": 81
                                }
                              }
                            }
                          ],
                          "range": [
                            8988,
                            9016
                          ],
                          "loc": {
                            "start": {
                              "line": 240,
                              "column": 54
                            },
                            "end": {
                              "line": 240,
                              "column": 82
                            }
                          }
                        }
                      ],
                      "range": [
                        8948,
                        9017
                      ],
                      "loc": {
                        "start": {
                          "line": 240,
                          "column": 14
                        },
                        "end": {
                          "line": 240,
                          "column": 83
                        }
                      }
                    },
                    "range": [
                      8942,
                      9018
                    ],
                    "loc": {
                      "start": {
                        "line": 240,
                        "column": 8
                      },
                      "end": {
                        "line": 240,
                        "column": 84
                      }
                    }
                  }
                ],
                "range": [
                  8932,
                  9024
                ],
                "loc": {
                  "start": {
                    "line": 239,
                    "column": 39
                  },
                  "end": {
                    "line": 241,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                8897,
                9024
              ],
              "loc": {
                "start": {
                  "line": 239,
                  "column": 4
                },
                "end": {
                  "line": 241,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            8850,
            9026
          ],
          "loc": {
            "start": {
              "line": 237,
              "column": 53
            },
            "end": {
              "line": 242,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          8804,
          9026
        ],
        "loc": {
          "start": {
            "line": 237,
            "column": 7
          },
          "end": {
            "line": 242,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
            "range": [
              7526,
              8796
            ],
            "loc": {
              "start": {
                "line": 202,
                "column": 0
              },
              "end": {
                "line": 236,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
            "range": [
              9027,
              10276
            ],
            "loc": {
              "start": {
                "line": 243,
                "column": 0
              },
              "end": {
                "line": 276,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        8797,
        9026
      ],
      "loc": {
        "start": {
          "line": 237,
          "column": 0
        },
        "end": {
          "line": 242,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
          "range": [
            7526,
            8796
          ],
          "loc": {
            "start": {
              "line": 202,
              "column": 0
            },
            "end": {
              "line": 236,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
          "range": [
            9027,
            10276
          ],
          "loc": {
            "start": {
              "line": 243,
              "column": 0
            },
            "end": {
              "line": 276,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNonEmpty",
          "range": [
            10293,
            10307
          ],
          "loc": {
            "start": {
              "line": 277,
              "column": 16
            },
            "end": {
              "line": 277,
              "column": 30
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              10308,
              10312
            ],
            "loc": {
              "start": {
                "line": 277,
                "column": 31
              },
              "end": {
                "line": 277,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              10314,
              10319
            ],
            "loc": {
              "start": {
                "line": 277,
                "column": 37
              },
              "end": {
                "line": 277,
                "column": 42
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              10321,
              10328
            ],
            "loc": {
              "start": {
                "line": 277,
                "column": 44
              },
              "end": {
                "line": 277,
                "column": 51
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyString",
                  "range": [
                    10336,
                    10348
                  ],
                  "loc": {
                    "start": {
                      "line": 278,
                      "column": 4
                    },
                    "end": {
                      "line": 278,
                      "column": 16
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      10349,
                      10353
                    ],
                    "loc": {
                      "start": {
                        "line": 278,
                        "column": 17
                      },
                      "end": {
                        "line": 278,
                        "column": 21
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      10355,
                      10360
                    ],
                    "loc": {
                      "start": {
                        "line": 278,
                        "column": 23
                      },
                      "end": {
                        "line": 278,
                        "column": 28
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      10362,
                      10369
                    ],
                    "loc": {
                      "start": {
                        "line": 278,
                        "column": 30
                      },
                      "end": {
                        "line": 278,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  10336,
                  10370
                ],
                "loc": {
                  "start": {
                    "line": 278,
                    "column": 4
                  },
                  "end": {
                    "line": 278,
                    "column": 38
                  }
                }
              },
              "range": [
                10336,
                10371
              ],
              "loc": {
                "start": {
                  "line": 278,
                  "column": 4
                },
                "end": {
                  "line": 278,
                  "column": 39
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    10380,
                    10385
                  ],
                  "loc": {
                    "start": {
                      "line": 279,
                      "column": 8
                    },
                    "end": {
                      "line": 279,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "",
                  "raw": "''",
                  "range": [
                    10390,
                    10392
                  ],
                  "loc": {
                    "start": {
                      "line": 279,
                      "column": 18
                    },
                    "end": {
                      "line": 279,
                      "column": 20
                    }
                  }
                },
                "range": [
                  10380,
                  10392
                ],
                "loc": {
                  "start": {
                    "line": 279,
                    "column": 8
                  },
                  "end": {
                    "line": 279,
                    "column": 20
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentEmptyStringError",
                        "range": [
                          10414,
                          10438
                        ],
                        "loc": {
                          "start": {
                            "line": 280,
                            "column": 18
                          },
                          "end": {
                            "line": 280,
                            "column": 42
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            10439,
                            10443
                          ],
                          "loc": {
                            "start": {
                              "line": 280,
                              "column": 43
                            },
                            "end": {
                              "line": 280,
                              "column": 47
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              10445,
                              10457
                            ],
                            "loc": {
                              "start": {
                                "line": 280,
                                "column": 49
                              },
                              "end": {
                                "line": 280,
                                "column": 61
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                10458,
                                10463
                              ],
                              "loc": {
                                "start": {
                                  "line": 280,
                                  "column": 62
                                },
                                "end": {
                                  "line": 280,
                                  "column": 67
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                10465,
                                10472
                              ],
                              "loc": {
                                "start": {
                                  "line": 280,
                                  "column": 69
                                },
                                "end": {
                                  "line": 280,
                                  "column": 76
                                }
                              }
                            }
                          ],
                          "range": [
                            10445,
                            10473
                          ],
                          "loc": {
                            "start": {
                              "line": 280,
                              "column": 49
                            },
                            "end": {
                              "line": 280,
                              "column": 77
                            }
                          }
                        }
                      ],
                      "range": [
                        10410,
                        10474
                      ],
                      "loc": {
                        "start": {
                          "line": 280,
                          "column": 14
                        },
                        "end": {
                          "line": 280,
                          "column": 78
                        }
                      }
                    },
                    "range": [
                      10404,
                      10475
                    ],
                    "loc": {
                      "start": {
                        "line": 280,
                        "column": 8
                      },
                      "end": {
                        "line": 280,
                        "column": 79
                      }
                    }
                  }
                ],
                "range": [
                  10394,
                  10481
                ],
                "loc": {
                  "start": {
                    "line": 279,
                    "column": 22
                  },
                  "end": {
                    "line": 281,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                10376,
                10481
              ],
              "loc": {
                "start": {
                  "line": 279,
                  "column": 4
                },
                "end": {
                  "line": 281,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            10330,
            10483
          ],
          "loc": {
            "start": {
              "line": 277,
              "column": 53
            },
            "end": {
              "line": 282,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          10284,
          10483
        ],
        "loc": {
          "start": {
            "line": 277,
            "column": 7
          },
          "end": {
            "line": 282,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
            "range": [
              9027,
              10276
            ],
            "loc": {
              "start": {
                "line": 243,
                "column": 0
              },
              "end": {
                "line": 276,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
            "range": [
              10484,
              11758
            ],
            "loc": {
              "start": {
                "line": 283,
                "column": 0
              },
              "end": {
                "line": 318,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        10277,
        10483
      ],
      "loc": {
        "start": {
          "line": 277,
          "column": 0
        },
        "end": {
          "line": 282,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
          "range": [
            9027,
            10276
          ],
          "loc": {
            "start": {
              "line": 243,
              "column": 0
            },
            "end": {
              "line": 276,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
          "range": [
            10484,
            11758
          ],
          "loc": {
            "start": {
              "line": 283,
              "column": 0
            },
            "end": {
              "line": 318,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNonZero",
          "range": [
            11775,
            11788
          ],
          "loc": {
            "start": {
              "line": 319,
              "column": 16
            },
            "end": {
              "line": 319,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              11789,
              11793
            ],
            "loc": {
              "start": {
                "line": 319,
                "column": 30
              },
              "end": {
                "line": 319,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              11795,
              11800
            ],
            "loc": {
              "start": {
                "line": 319,
                "column": 36
              },
              "end": {
                "line": 319,
                "column": 41
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              11802,
              11809
            ],
            "loc": {
              "start": {
                "line": 319,
                "column": 43
              },
              "end": {
                "line": 319,
                "column": 50
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyNumber",
                  "range": [
                    11817,
                    11829
                  ],
                  "loc": {
                    "start": {
                      "line": 320,
                      "column": 4
                    },
                    "end": {
                      "line": 320,
                      "column": 16
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      11830,
                      11834
                    ],
                    "loc": {
                      "start": {
                        "line": 320,
                        "column": 17
                      },
                      "end": {
                        "line": 320,
                        "column": 21
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      11836,
                      11841
                    ],
                    "loc": {
                      "start": {
                        "line": 320,
                        "column": 23
                      },
                      "end": {
                        "line": 320,
                        "column": 28
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      11843,
                      11850
                    ],
                    "loc": {
                      "start": {
                        "line": 320,
                        "column": 30
                      },
                      "end": {
                        "line": 320,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  11817,
                  11851
                ],
                "loc": {
                  "start": {
                    "line": 320,
                    "column": 4
                  },
                  "end": {
                    "line": 320,
                    "column": 38
                  }
                }
              },
              "range": [
                11817,
                11852
              ],
              "loc": {
                "start": {
                  "line": 320,
                  "column": 4
                },
                "end": {
                  "line": 320,
                  "column": 39
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    11861,
                    11866
                  ],
                  "loc": {
                    "start": {
                      "line": 321,
                      "column": 8
                    },
                    "end": {
                      "line": 321,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0",
                  "range": [
                    11871,
                    11872
                  ],
                  "loc": {
                    "start": {
                      "line": 321,
                      "column": 18
                    },
                    "end": {
                      "line": 321,
                      "column": 19
                    }
                  }
                },
                "range": [
                  11861,
                  11872
                ],
                "loc": {
                  "start": {
                    "line": 321,
                    "column": 8
                  },
                  "end": {
                    "line": 321,
                    "column": 19
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentZeroError",
                        "range": [
                          11894,
                          11911
                        ],
                        "loc": {
                          "start": {
                            "line": 322,
                            "column": 18
                          },
                          "end": {
                            "line": 322,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            11912,
                            11916
                          ],
                          "loc": {
                            "start": {
                              "line": 322,
                              "column": 36
                            },
                            "end": {
                              "line": 322,
                              "column": 40
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              11918,
                              11930
                            ],
                            "loc": {
                              "start": {
                                "line": 322,
                                "column": 42
                              },
                              "end": {
                                "line": 322,
                                "column": 54
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                11931,
                                11936
                              ],
                              "loc": {
                                "start": {
                                  "line": 322,
                                  "column": 55
                                },
                                "end": {
                                  "line": 322,
                                  "column": 60
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                11938,
                                11945
                              ],
                              "loc": {
                                "start": {
                                  "line": 322,
                                  "column": 62
                                },
                                "end": {
                                  "line": 322,
                                  "column": 69
                                }
                              }
                            }
                          ],
                          "range": [
                            11918,
                            11946
                          ],
                          "loc": {
                            "start": {
                              "line": 322,
                              "column": 42
                            },
                            "end": {
                              "line": 322,
                              "column": 70
                            }
                          }
                        }
                      ],
                      "range": [
                        11890,
                        11947
                      ],
                      "loc": {
                        "start": {
                          "line": 322,
                          "column": 14
                        },
                        "end": {
                          "line": 322,
                          "column": 71
                        }
                      }
                    },
                    "range": [
                      11884,
                      11948
                    ],
                    "loc": {
                      "start": {
                        "line": 322,
                        "column": 8
                      },
                      "end": {
                        "line": 322,
                        "column": 72
                      }
                    }
                  }
                ],
                "range": [
                  11874,
                  11954
                ],
                "loc": {
                  "start": {
                    "line": 321,
                    "column": 21
                  },
                  "end": {
                    "line": 323,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                11857,
                11954
              ],
              "loc": {
                "start": {
                  "line": 321,
                  "column": 4
                },
                "end": {
                  "line": 323,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            11811,
            11956
          ],
          "loc": {
            "start": {
              "line": 319,
              "column": 52
            },
            "end": {
              "line": 324,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          11766,
          11956
        ],
        "loc": {
          "start": {
            "line": 319,
            "column": 7
          },
          "end": {
            "line": 324,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
            "range": [
              10484,
              11758
            ],
            "loc": {
              "start": {
                "line": 283,
                "column": 0
              },
              "end": {
                "line": 318,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
            "range": [
              11957,
              13321
            ],
            "loc": {
              "start": {
                "line": 325,
                "column": 0
              },
              "end": {
                "line": 362,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        11759,
        11956
      ],
      "loc": {
        "start": {
          "line": 319,
          "column": 0
        },
        "end": {
          "line": 324,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
          "range": [
            10484,
            11758
          ],
          "loc": {
            "start": {
              "line": 283,
              "column": 0
            },
            "end": {
              "line": 318,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
          "range": [
            11957,
            13321
          ],
          "loc": {
            "start": {
              "line": 325,
              "column": 0
            },
            "end": {
              "line": 362,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNotNull",
          "range": [
            13338,
            13351
          ],
          "loc": {
            "start": {
              "line": 363,
              "column": 16
            },
            "end": {
              "line": 363,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              13352,
              13356
            ],
            "loc": {
              "start": {
                "line": 363,
                "column": 30
              },
              "end": {
                "line": 363,
                "column": 34
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              13358,
              13363
            ],
            "loc": {
              "start": {
                "line": 363,
                "column": 36
              },
              "end": {
                "line": 363,
                "column": 41
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              13365,
              13372
            ],
            "loc": {
              "start": {
                "line": 363,
                "column": 43
              },
              "end": {
                "line": 363,
                "column": 50
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    13380,
                    13393
                  ],
                  "loc": {
                    "start": {
                      "line": 364,
                      "column": 4
                    },
                    "end": {
                      "line": 364,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      13394,
                      13398
                    ],
                    "loc": {
                      "start": {
                        "line": 364,
                        "column": 18
                      },
                      "end": {
                        "line": 364,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      13400,
                      13405
                    ],
                    "loc": {
                      "start": {
                        "line": 364,
                        "column": 24
                      },
                      "end": {
                        "line": 364,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      13407,
                      13414
                    ],
                    "loc": {
                      "start": {
                        "line": 364,
                        "column": 31
                      },
                      "end": {
                        "line": 364,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  13380,
                  13415
                ],
                "loc": {
                  "start": {
                    "line": 364,
                    "column": 4
                  },
                  "end": {
                    "line": 364,
                    "column": 39
                  }
                }
              },
              "range": [
                13380,
                13416
              ],
              "loc": {
                "start": {
                  "line": 364,
                  "column": 4
                },
                "end": {
                  "line": 364,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    13425,
                    13430
                  ],
                  "loc": {
                    "start": {
                      "line": 365,
                      "column": 8
                    },
                    "end": {
                      "line": 365,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": null,
                  "raw": "null",
                  "range": [
                    13435,
                    13439
                  ],
                  "loc": {
                    "start": {
                      "line": 365,
                      "column": 18
                    },
                    "end": {
                      "line": 365,
                      "column": 22
                    }
                  }
                },
                "range": [
                  13425,
                  13439
                ],
                "loc": {
                  "start": {
                    "line": 365,
                    "column": 8
                  },
                  "end": {
                    "line": 365,
                    "column": 22
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentNullError",
                        "range": [
                          13461,
                          13478
                        ],
                        "loc": {
                          "start": {
                            "line": 366,
                            "column": 18
                          },
                          "end": {
                            "line": 366,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            13479,
                            13483
                          ],
                          "loc": {
                            "start": {
                              "line": 366,
                              "column": 36
                            },
                            "end": {
                              "line": 366,
                              "column": 40
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              13485,
                              13497
                            ],
                            "loc": {
                              "start": {
                                "line": 366,
                                "column": 42
                              },
                              "end": {
                                "line": 366,
                                "column": 54
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                13498,
                                13503
                              ],
                              "loc": {
                                "start": {
                                  "line": 366,
                                  "column": 55
                                },
                                "end": {
                                  "line": 366,
                                  "column": 60
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                13505,
                                13512
                              ],
                              "loc": {
                                "start": {
                                  "line": 366,
                                  "column": 62
                                },
                                "end": {
                                  "line": 366,
                                  "column": 69
                                }
                              }
                            }
                          ],
                          "range": [
                            13485,
                            13513
                          ],
                          "loc": {
                            "start": {
                              "line": 366,
                              "column": 42
                            },
                            "end": {
                              "line": 366,
                              "column": 70
                            }
                          }
                        }
                      ],
                      "range": [
                        13457,
                        13514
                      ],
                      "loc": {
                        "start": {
                          "line": 366,
                          "column": 14
                        },
                        "end": {
                          "line": 366,
                          "column": 71
                        }
                      }
                    },
                    "range": [
                      13451,
                      13515
                    ],
                    "loc": {
                      "start": {
                        "line": 366,
                        "column": 8
                      },
                      "end": {
                        "line": 366,
                        "column": 72
                      }
                    }
                  }
                ],
                "range": [
                  13441,
                  13521
                ],
                "loc": {
                  "start": {
                    "line": 365,
                    "column": 24
                  },
                  "end": {
                    "line": 367,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                13421,
                13521
              ],
              "loc": {
                "start": {
                  "line": 365,
                  "column": 4
                },
                "end": {
                  "line": 367,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            13374,
            13523
          ],
          "loc": {
            "start": {
              "line": 363,
              "column": 52
            },
            "end": {
              "line": 368,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          13329,
          13523
        ],
        "loc": {
          "start": {
            "line": 363,
            "column": 7
          },
          "end": {
            "line": 368,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
            "range": [
              11957,
              13321
            ],
            "loc": {
              "start": {
                "line": 325,
                "column": 0
              },
              "end": {
                "line": 362,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
            "range": [
              13524,
              14936
            ],
            "loc": {
              "start": {
                "line": 369,
                "column": 0
              },
              "end": {
                "line": 405,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        13322,
        13523
      ],
      "loc": {
        "start": {
          "line": 363,
          "column": 0
        },
        "end": {
          "line": 368,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
          "range": [
            11957,
            13321
          ],
          "loc": {
            "start": {
              "line": 325,
              "column": 0
            },
            "end": {
              "line": 362,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
          "range": [
            13524,
            14936
          ],
          "loc": {
            "start": {
              "line": 369,
              "column": 0
            },
            "end": {
              "line": 405,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNotWhitespace",
          "range": [
            14953,
            14972
          ],
          "loc": {
            "start": {
              "line": 406,
              "column": 16
            },
            "end": {
              "line": 406,
              "column": 35
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              14973,
              14977
            ],
            "loc": {
              "start": {
                "line": 406,
                "column": 36
              },
              "end": {
                "line": 406,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              14979,
              14984
            ],
            "loc": {
              "start": {
                "line": 406,
                "column": 42
              },
              "end": {
                "line": 406,
                "column": 47
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              14986,
              14993
            ],
            "loc": {
              "start": {
                "line": 406,
                "column": 49
              },
              "end": {
                "line": 406,
                "column": 56
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyNonEmpty",
                  "range": [
                    15001,
                    15015
                  ],
                  "loc": {
                    "start": {
                      "line": 407,
                      "column": 4
                    },
                    "end": {
                      "line": 407,
                      "column": 18
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      15016,
                      15020
                    ],
                    "loc": {
                      "start": {
                        "line": 407,
                        "column": 19
                      },
                      "end": {
                        "line": 407,
                        "column": 23
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      15022,
                      15027
                    ],
                    "loc": {
                      "start": {
                        "line": 407,
                        "column": 25
                      },
                      "end": {
                        "line": 407,
                        "column": 30
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      15029,
                      15036
                    ],
                    "loc": {
                      "start": {
                        "line": 407,
                        "column": 32
                      },
                      "end": {
                        "line": 407,
                        "column": 39
                      }
                    }
                  }
                ],
                "range": [
                  15001,
                  15037
                ],
                "loc": {
                  "start": {
                    "line": 407,
                    "column": 4
                  },
                  "end": {
                    "line": 407,
                    "column": 40
                  }
                }
              },
              "range": [
                15001,
                15038
              ],
              "loc": {
                "start": {
                  "line": 407,
                  "column": 4
                },
                "end": {
                  "line": 407,
                  "column": 41
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "value",
                      "range": [
                        15047,
                        15052
                      ],
                      "loc": {
                        "start": {
                          "line": 408,
                          "column": 8
                        },
                        "end": {
                          "line": 408,
                          "column": 13
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "trim",
                      "range": [
                        15053,
                        15057
                      ],
                      "loc": {
                        "start": {
                          "line": 408,
                          "column": 14
                        },
                        "end": {
                          "line": 408,
                          "column": 18
                        }
                      }
                    },
                    "range": [
                      15047,
                      15057
                    ],
                    "loc": {
                      "start": {
                        "line": 408,
                        "column": 8
                      },
                      "end": {
                        "line": 408,
                        "column": 18
                      }
                    }
                  },
                  "arguments": [],
                  "range": [
                    15047,
                    15059
                  ],
                  "loc": {
                    "start": {
                      "line": 408,
                      "column": 8
                    },
                    "end": {
                      "line": 408,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "",
                  "raw": "''",
                  "range": [
                    15064,
                    15066
                  ],
                  "loc": {
                    "start": {
                      "line": 408,
                      "column": 25
                    },
                    "end": {
                      "line": 408,
                      "column": 27
                    }
                  }
                },
                "range": [
                  15047,
                  15066
                ],
                "loc": {
                  "start": {
                    "line": 408,
                    "column": 8
                  },
                  "end": {
                    "line": 408,
                    "column": 27
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentWhitespaceStringError",
                        "range": [
                          15088,
                          15117
                        ],
                        "loc": {
                          "start": {
                            "line": 409,
                            "column": 18
                          },
                          "end": {
                            "line": 409,
                            "column": 47
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            15118,
                            15122
                          ],
                          "loc": {
                            "start": {
                              "line": 409,
                              "column": 48
                            },
                            "end": {
                              "line": 409,
                              "column": 52
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              15124,
                              15136
                            ],
                            "loc": {
                              "start": {
                                "line": 409,
                                "column": 54
                              },
                              "end": {
                                "line": 409,
                                "column": 66
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                15137,
                                15142
                              ],
                              "loc": {
                                "start": {
                                  "line": 409,
                                  "column": 67
                                },
                                "end": {
                                  "line": 409,
                                  "column": 72
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                15144,
                                15151
                              ],
                              "loc": {
                                "start": {
                                  "line": 409,
                                  "column": 74
                                },
                                "end": {
                                  "line": 409,
                                  "column": 81
                                }
                              }
                            }
                          ],
                          "range": [
                            15124,
                            15152
                          ],
                          "loc": {
                            "start": {
                              "line": 409,
                              "column": 54
                            },
                            "end": {
                              "line": 409,
                              "column": 82
                            }
                          }
                        }
                      ],
                      "range": [
                        15084,
                        15153
                      ],
                      "loc": {
                        "start": {
                          "line": 409,
                          "column": 14
                        },
                        "end": {
                          "line": 409,
                          "column": 83
                        }
                      }
                    },
                    "range": [
                      15078,
                      15154
                    ],
                    "loc": {
                      "start": {
                        "line": 409,
                        "column": 8
                      },
                      "end": {
                        "line": 409,
                        "column": 84
                      }
                    }
                  }
                ],
                "range": [
                  15068,
                  15160
                ],
                "loc": {
                  "start": {
                    "line": 408,
                    "column": 29
                  },
                  "end": {
                    "line": 410,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                15043,
                15160
              ],
              "loc": {
                "start": {
                  "line": 408,
                  "column": 4
                },
                "end": {
                  "line": 410,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            14995,
            15162
          ],
          "loc": {
            "start": {
              "line": 406,
              "column": 58
            },
            "end": {
              "line": 411,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          14944,
          15162
        ],
        "loc": {
          "start": {
            "line": 406,
            "column": 7
          },
          "end": {
            "line": 411,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
            "range": [
              13524,
              14936
            ],
            "loc": {
              "start": {
                "line": 369,
                "column": 0
              },
              "end": {
                "line": 405,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
            "range": [
              15163,
              16442
            ],
            "loc": {
              "start": {
                "line": 412,
                "column": 0
              },
              "end": {
                "line": 447,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        14937,
        15162
      ],
      "loc": {
        "start": {
          "line": 406,
          "column": 0
        },
        "end": {
          "line": 411,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
          "range": [
            13524,
            14936
          ],
          "loc": {
            "start": {
              "line": 369,
              "column": 0
            },
            "end": {
              "line": 405,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
          "range": [
            15163,
            16442
          ],
          "loc": {
            "start": {
              "line": 412,
              "column": 0
            },
            "end": {
              "line": 447,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyNumber",
          "range": [
            16459,
            16471
          ],
          "loc": {
            "start": {
              "line": 448,
              "column": 16
            },
            "end": {
              "line": 448,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              16472,
              16476
            ],
            "loc": {
              "start": {
                "line": 448,
                "column": 29
              },
              "end": {
                "line": 448,
                "column": 33
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              16478,
              16483
            ],
            "loc": {
              "start": {
                "line": 448,
                "column": 35
              },
              "end": {
                "line": 448,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              16485,
              16492
            ],
            "loc": {
              "start": {
                "line": 448,
                "column": 42
              },
              "end": {
                "line": 448,
                "column": 49
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    16500,
                    16513
                  ],
                  "loc": {
                    "start": {
                      "line": 449,
                      "column": 4
                    },
                    "end": {
                      "line": 449,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      16514,
                      16518
                    ],
                    "loc": {
                      "start": {
                        "line": 449,
                        "column": 18
                      },
                      "end": {
                        "line": 449,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      16520,
                      16525
                    ],
                    "loc": {
                      "start": {
                        "line": 449,
                        "column": 24
                      },
                      "end": {
                        "line": 449,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      16527,
                      16534
                    ],
                    "loc": {
                      "start": {
                        "line": 449,
                        "column": 31
                      },
                      "end": {
                        "line": 449,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  16500,
                  16535
                ],
                "loc": {
                  "start": {
                    "line": 449,
                    "column": 4
                  },
                  "end": {
                    "line": 449,
                    "column": 39
                  }
                }
              },
              "range": [
                16500,
                16536
              ],
              "loc": {
                "start": {
                  "line": 449,
                  "column": 4
                },
                "end": {
                  "line": 449,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      16552,
                      16557
                    ],
                    "loc": {
                      "start": {
                        "line": 450,
                        "column": 15
                      },
                      "end": {
                        "line": 450,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    16545,
                    16557
                  ],
                  "loc": {
                    "start": {
                      "line": 450,
                      "column": 8
                    },
                    "end": {
                      "line": 450,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "number",
                  "raw": "'number'",
                  "range": [
                    16562,
                    16570
                  ],
                  "loc": {
                    "start": {
                      "line": 450,
                      "column": 25
                    },
                    "end": {
                      "line": 450,
                      "column": 33
                    }
                  }
                },
                "range": [
                  16545,
                  16570
                ],
                "loc": {
                  "start": {
                    "line": 450,
                    "column": 8
                  },
                  "end": {
                    "line": 450,
                    "column": 33
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          16592,
                          16609
                        ],
                        "loc": {
                          "start": {
                            "line": 451,
                            "column": 18
                          },
                          "end": {
                            "line": 451,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "number",
                          "raw": "'number'",
                          "range": [
                            16610,
                            16618
                          ],
                          "loc": {
                            "start": {
                              "line": 451,
                              "column": 36
                            },
                            "end": {
                              "line": 451,
                              "column": 44
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            16620,
                            16624
                          ],
                          "loc": {
                            "start": {
                              "line": 451,
                              "column": 46
                            },
                            "end": {
                              "line": 451,
                              "column": 50
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              16626,
                              16638
                            ],
                            "loc": {
                              "start": {
                                "line": 451,
                                "column": 52
                              },
                              "end": {
                                "line": 451,
                                "column": 64
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                16639,
                                16644
                              ],
                              "loc": {
                                "start": {
                                  "line": 451,
                                  "column": 65
                                },
                                "end": {
                                  "line": 451,
                                  "column": 70
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                16646,
                                16653
                              ],
                              "loc": {
                                "start": {
                                  "line": 451,
                                  "column": 72
                                },
                                "end": {
                                  "line": 451,
                                  "column": 79
                                }
                              }
                            }
                          ],
                          "range": [
                            16626,
                            16654
                          ],
                          "loc": {
                            "start": {
                              "line": 451,
                              "column": 52
                            },
                            "end": {
                              "line": 451,
                              "column": 80
                            }
                          }
                        }
                      ],
                      "range": [
                        16588,
                        16655
                      ],
                      "loc": {
                        "start": {
                          "line": 451,
                          "column": 14
                        },
                        "end": {
                          "line": 451,
                          "column": 81
                        }
                      }
                    },
                    "range": [
                      16582,
                      16656
                    ],
                    "loc": {
                      "start": {
                        "line": 451,
                        "column": 8
                      },
                      "end": {
                        "line": 451,
                        "column": 82
                      }
                    }
                  }
                ],
                "range": [
                  16572,
                  16662
                ],
                "loc": {
                  "start": {
                    "line": 450,
                    "column": 35
                  },
                  "end": {
                    "line": 452,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                16541,
                16662
              ],
              "loc": {
                "start": {
                  "line": 450,
                  "column": 4
                },
                "end": {
                  "line": 452,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Number",
                    "range": [
                      16671,
                      16677
                    ],
                    "loc": {
                      "start": {
                        "line": 453,
                        "column": 8
                      },
                      "end": {
                        "line": 453,
                        "column": 14
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "isNaN",
                    "range": [
                      16678,
                      16683
                    ],
                    "loc": {
                      "start": {
                        "line": 453,
                        "column": 15
                      },
                      "end": {
                        "line": 453,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    16671,
                    16683
                  ],
                  "loc": {
                    "start": {
                      "line": 453,
                      "column": 8
                    },
                    "end": {
                      "line": 453,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      16684,
                      16689
                    ],
                    "loc": {
                      "start": {
                        "line": 453,
                        "column": 21
                      },
                      "end": {
                        "line": 453,
                        "column": 26
                      }
                    }
                  }
                ],
                "range": [
                  16671,
                  16690
                ],
                "loc": {
                  "start": {
                    "line": 453,
                    "column": 8
                  },
                  "end": {
                    "line": 453,
                    "column": 27
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentNanError",
                        "range": [
                          16712,
                          16728
                        ],
                        "loc": {
                          "start": {
                            "line": 454,
                            "column": 18
                          },
                          "end": {
                            "line": 454,
                            "column": 34
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            16729,
                            16733
                          ],
                          "loc": {
                            "start": {
                              "line": 454,
                              "column": 35
                            },
                            "end": {
                              "line": 454,
                              "column": 39
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              16735,
                              16747
                            ],
                            "loc": {
                              "start": {
                                "line": 454,
                                "column": 41
                              },
                              "end": {
                                "line": 454,
                                "column": 53
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                16748,
                                16753
                              ],
                              "loc": {
                                "start": {
                                  "line": 454,
                                  "column": 54
                                },
                                "end": {
                                  "line": 454,
                                  "column": 59
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                16755,
                                16762
                              ],
                              "loc": {
                                "start": {
                                  "line": 454,
                                  "column": 61
                                },
                                "end": {
                                  "line": 454,
                                  "column": 68
                                }
                              }
                            }
                          ],
                          "range": [
                            16735,
                            16763
                          ],
                          "loc": {
                            "start": {
                              "line": 454,
                              "column": 41
                            },
                            "end": {
                              "line": 454,
                              "column": 69
                            }
                          }
                        }
                      ],
                      "range": [
                        16708,
                        16764
                      ],
                      "loc": {
                        "start": {
                          "line": 454,
                          "column": 14
                        },
                        "end": {
                          "line": 454,
                          "column": 70
                        }
                      }
                    },
                    "range": [
                      16702,
                      16765
                    ],
                    "loc": {
                      "start": {
                        "line": 454,
                        "column": 8
                      },
                      "end": {
                        "line": 454,
                        "column": 71
                      }
                    }
                  }
                ],
                "range": [
                  16692,
                  16771
                ],
                "loc": {
                  "start": {
                    "line": 453,
                    "column": 29
                  },
                  "end": {
                    "line": 455,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                16667,
                16771
              ],
              "loc": {
                "start": {
                  "line": 453,
                  "column": 4
                },
                "end": {
                  "line": 455,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            16494,
            16773
          ],
          "loc": {
            "start": {
              "line": 448,
              "column": 51
            },
            "end": {
              "line": 456,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          16450,
          16773
        ],
        "loc": {
          "start": {
            "line": 448,
            "column": 7
          },
          "end": {
            "line": 456,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
            "range": [
              15163,
              16442
            ],
            "loc": {
              "start": {
                "line": 412,
                "column": 0
              },
              "end": {
                "line": 447,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
            "range": [
              16774,
              17982
            ],
            "loc": {
              "start": {
                "line": 457,
                "column": 0
              },
              "end": {
                "line": 490,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        16443,
        16773
      ],
      "loc": {
        "start": {
          "line": 448,
          "column": 0
        },
        "end": {
          "line": 456,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
          "range": [
            15163,
            16442
          ],
          "loc": {
            "start": {
              "line": 412,
              "column": 0
            },
            "end": {
              "line": 447,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
          "range": [
            16774,
            17982
          ],
          "loc": {
            "start": {
              "line": 457,
              "column": 0
            },
            "end": {
              "line": 490,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyObject",
          "range": [
            17999,
            18011
          ],
          "loc": {
            "start": {
              "line": 491,
              "column": 16
            },
            "end": {
              "line": 491,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              18012,
              18016
            ],
            "loc": {
              "start": {
                "line": 491,
                "column": 29
              },
              "end": {
                "line": 491,
                "column": 33
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              18018,
              18023
            ],
            "loc": {
              "start": {
                "line": 491,
                "column": 35
              },
              "end": {
                "line": 491,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              18025,
              18032
            ],
            "loc": {
              "start": {
                "line": 491,
                "column": 42
              },
              "end": {
                "line": 491,
                "column": 49
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    18040,
                    18053
                  ],
                  "loc": {
                    "start": {
                      "line": 492,
                      "column": 4
                    },
                    "end": {
                      "line": 492,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      18054,
                      18058
                    ],
                    "loc": {
                      "start": {
                        "line": 492,
                        "column": 18
                      },
                      "end": {
                        "line": 492,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      18060,
                      18065
                    ],
                    "loc": {
                      "start": {
                        "line": 492,
                        "column": 24
                      },
                      "end": {
                        "line": 492,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      18067,
                      18074
                    ],
                    "loc": {
                      "start": {
                        "line": 492,
                        "column": 31
                      },
                      "end": {
                        "line": 492,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  18040,
                  18075
                ],
                "loc": {
                  "start": {
                    "line": 492,
                    "column": 4
                  },
                  "end": {
                    "line": 492,
                    "column": 39
                  }
                }
              },
              "range": [
                18040,
                18076
              ],
              "loc": {
                "start": {
                  "line": 492,
                  "column": 4
                },
                "end": {
                  "line": 492,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      18092,
                      18097
                    ],
                    "loc": {
                      "start": {
                        "line": 493,
                        "column": 15
                      },
                      "end": {
                        "line": 493,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    18085,
                    18097
                  ],
                  "loc": {
                    "start": {
                      "line": 493,
                      "column": 8
                    },
                    "end": {
                      "line": 493,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "object",
                  "raw": "'object'",
                  "range": [
                    18102,
                    18110
                  ],
                  "loc": {
                    "start": {
                      "line": 493,
                      "column": 25
                    },
                    "end": {
                      "line": 493,
                      "column": 33
                    }
                  }
                },
                "range": [
                  18085,
                  18110
                ],
                "loc": {
                  "start": {
                    "line": 493,
                    "column": 8
                  },
                  "end": {
                    "line": 493,
                    "column": 33
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          18132,
                          18149
                        ],
                        "loc": {
                          "start": {
                            "line": 494,
                            "column": 18
                          },
                          "end": {
                            "line": 494,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "object",
                          "raw": "'object'",
                          "range": [
                            18150,
                            18158
                          ],
                          "loc": {
                            "start": {
                              "line": 494,
                              "column": 36
                            },
                            "end": {
                              "line": 494,
                              "column": 44
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            18160,
                            18164
                          ],
                          "loc": {
                            "start": {
                              "line": 494,
                              "column": 46
                            },
                            "end": {
                              "line": 494,
                              "column": 50
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              18166,
                              18178
                            ],
                            "loc": {
                              "start": {
                                "line": 494,
                                "column": 52
                              },
                              "end": {
                                "line": 494,
                                "column": 64
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                18179,
                                18184
                              ],
                              "loc": {
                                "start": {
                                  "line": 494,
                                  "column": 65
                                },
                                "end": {
                                  "line": 494,
                                  "column": 70
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                18186,
                                18193
                              ],
                              "loc": {
                                "start": {
                                  "line": 494,
                                  "column": 72
                                },
                                "end": {
                                  "line": 494,
                                  "column": 79
                                }
                              }
                            }
                          ],
                          "range": [
                            18166,
                            18194
                          ],
                          "loc": {
                            "start": {
                              "line": 494,
                              "column": 52
                            },
                            "end": {
                              "line": 494,
                              "column": 80
                            }
                          }
                        }
                      ],
                      "range": [
                        18128,
                        18195
                      ],
                      "loc": {
                        "start": {
                          "line": 494,
                          "column": 14
                        },
                        "end": {
                          "line": 494,
                          "column": 81
                        }
                      }
                    },
                    "range": [
                      18122,
                      18196
                    ],
                    "loc": {
                      "start": {
                        "line": 494,
                        "column": 8
                      },
                      "end": {
                        "line": 494,
                        "column": 82
                      }
                    }
                  }
                ],
                "range": [
                  18112,
                  18202
                ],
                "loc": {
                  "start": {
                    "line": 493,
                    "column": 35
                  },
                  "end": {
                    "line": 495,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                18081,
                18202
              ],
              "loc": {
                "start": {
                  "line": 493,
                  "column": 4
                },
                "end": {
                  "line": 495,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            18034,
            18204
          ],
          "loc": {
            "start": {
              "line": 491,
              "column": 51
            },
            "end": {
              "line": 496,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          17990,
          18204
        ],
        "loc": {
          "start": {
            "line": 491,
            "column": 7
          },
          "end": {
            "line": 496,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
            "range": [
              16774,
              17982
            ],
            "loc": {
              "start": {
                "line": 457,
                "column": 0
              },
              "end": {
                "line": 490,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
            "range": [
              18205,
              19426
            ],
            "loc": {
              "start": {
                "line": 497,
                "column": 0
              },
              "end": {
                "line": 530,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        17983,
        18204
      ],
      "loc": {
        "start": {
          "line": 491,
          "column": 0
        },
        "end": {
          "line": 496,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
          "range": [
            16774,
            17982
          ],
          "loc": {
            "start": {
              "line": 457,
              "column": 0
            },
            "end": {
              "line": 490,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
          "range": [
            18205,
            19426
          ],
          "loc": {
            "start": {
              "line": 497,
              "column": 0
            },
            "end": {
              "line": 530,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyString",
          "range": [
            19443,
            19455
          ],
          "loc": {
            "start": {
              "line": 531,
              "column": 16
            },
            "end": {
              "line": 531,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              19456,
              19460
            ],
            "loc": {
              "start": {
                "line": 531,
                "column": 29
              },
              "end": {
                "line": 531,
                "column": 33
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              19462,
              19467
            ],
            "loc": {
              "start": {
                "line": 531,
                "column": 35
              },
              "end": {
                "line": 531,
                "column": 40
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              19469,
              19476
            ],
            "loc": {
              "start": {
                "line": 531,
                "column": 42
              },
              "end": {
                "line": 531,
                "column": 49
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyDefined",
                  "range": [
                    19484,
                    19497
                  ],
                  "loc": {
                    "start": {
                      "line": 532,
                      "column": 4
                    },
                    "end": {
                      "line": 532,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      19498,
                      19502
                    ],
                    "loc": {
                      "start": {
                        "line": 532,
                        "column": 18
                      },
                      "end": {
                        "line": 532,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      19504,
                      19509
                    ],
                    "loc": {
                      "start": {
                        "line": 532,
                        "column": 24
                      },
                      "end": {
                        "line": 532,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      19511,
                      19518
                    ],
                    "loc": {
                      "start": {
                        "line": 532,
                        "column": 31
                      },
                      "end": {
                        "line": 532,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  19484,
                  19519
                ],
                "loc": {
                  "start": {
                    "line": 532,
                    "column": 4
                  },
                  "end": {
                    "line": 532,
                    "column": 39
                  }
                }
              },
              "range": [
                19484,
                19520
              ],
              "loc": {
                "start": {
                  "line": 532,
                  "column": 4
                },
                "end": {
                  "line": 532,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "!==",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      19536,
                      19541
                    ],
                    "loc": {
                      "start": {
                        "line": 533,
                        "column": 15
                      },
                      "end": {
                        "line": 533,
                        "column": 20
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    19529,
                    19541
                  ],
                  "loc": {
                    "start": {
                      "line": 533,
                      "column": 8
                    },
                    "end": {
                      "line": 533,
                      "column": 20
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "string",
                  "raw": "'string'",
                  "range": [
                    19546,
                    19554
                  ],
                  "loc": {
                    "start": {
                      "line": 533,
                      "column": 25
                    },
                    "end": {
                      "line": 533,
                      "column": 33
                    }
                  }
                },
                "range": [
                  19529,
                  19554
                ],
                "loc": {
                  "start": {
                    "line": 533,
                    "column": 8
                  },
                  "end": {
                    "line": 533,
                    "column": 33
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentTypeError",
                        "range": [
                          19576,
                          19593
                        ],
                        "loc": {
                          "start": {
                            "line": 534,
                            "column": 18
                          },
                          "end": {
                            "line": 534,
                            "column": 35
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Literal",
                          "value": "string",
                          "raw": "'string'",
                          "range": [
                            19594,
                            19602
                          ],
                          "loc": {
                            "start": {
                              "line": 534,
                              "column": 36
                            },
                            "end": {
                              "line": 534,
                              "column": 44
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            19604,
                            19608
                          ],
                          "loc": {
                            "start": {
                              "line": 534,
                              "column": 46
                            },
                            "end": {
                              "line": 534,
                              "column": 50
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              19610,
                              19622
                            ],
                            "loc": {
                              "start": {
                                "line": 534,
                                "column": 52
                              },
                              "end": {
                                "line": 534,
                                "column": 64
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                19623,
                                19628
                              ],
                              "loc": {
                                "start": {
                                  "line": 534,
                                  "column": 65
                                },
                                "end": {
                                  "line": 534,
                                  "column": 70
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                19630,
                                19637
                              ],
                              "loc": {
                                "start": {
                                  "line": 534,
                                  "column": 72
                                },
                                "end": {
                                  "line": 534,
                                  "column": 79
                                }
                              }
                            }
                          ],
                          "range": [
                            19610,
                            19638
                          ],
                          "loc": {
                            "start": {
                              "line": 534,
                              "column": 52
                            },
                            "end": {
                              "line": 534,
                              "column": 80
                            }
                          }
                        }
                      ],
                      "range": [
                        19572,
                        19639
                      ],
                      "loc": {
                        "start": {
                          "line": 534,
                          "column": 14
                        },
                        "end": {
                          "line": 534,
                          "column": 81
                        }
                      }
                    },
                    "range": [
                      19566,
                      19640
                    ],
                    "loc": {
                      "start": {
                        "line": 534,
                        "column": 8
                      },
                      "end": {
                        "line": 534,
                        "column": 82
                      }
                    }
                  }
                ],
                "range": [
                  19556,
                  19646
                ],
                "loc": {
                  "start": {
                    "line": 533,
                    "column": 35
                  },
                  "end": {
                    "line": 535,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                19525,
                19646
              ],
              "loc": {
                "start": {
                  "line": 533,
                  "column": 4
                },
                "end": {
                  "line": 535,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            19478,
            19648
          ],
          "loc": {
            "start": {
              "line": 531,
              "column": 51
            },
            "end": {
              "line": 536,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          19434,
          19648
        ],
        "loc": {
          "start": {
            "line": 531,
            "column": 7
          },
          "end": {
            "line": 536,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
            "range": [
              18205,
              19426
            ],
            "loc": {
              "start": {
                "line": 497,
                "column": 0
              },
              "end": {
                "line": 530,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              19649,
              20942
            ],
            "loc": {
              "start": {
                "line": 537,
                "column": 0
              },
              "end": {
                "line": 572,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        19427,
        19648
      ],
      "loc": {
        "start": {
          "line": 531,
          "column": 0
        },
        "end": {
          "line": 536,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
          "range": [
            18205,
            19426
          ],
          "loc": {
            "start": {
              "line": 497,
              "column": 0
            },
            "end": {
              "line": 530,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            19649,
            20942
          ],
          "loc": {
            "start": {
              "line": 537,
              "column": 0
            },
            "end": {
              "line": 572,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyTrue",
          "range": [
            20959,
            20969
          ],
          "loc": {
            "start": {
              "line": 573,
              "column": 16
            },
            "end": {
              "line": 573,
              "column": 26
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              20970,
              20974
            ],
            "loc": {
              "start": {
                "line": 573,
                "column": 27
              },
              "end": {
                "line": 573,
                "column": 31
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              20976,
              20981
            ],
            "loc": {
              "start": {
                "line": 573,
                "column": 33
              },
              "end": {
                "line": 573,
                "column": 38
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              20983,
              20990
            ],
            "loc": {
              "start": {
                "line": 573,
                "column": 40
              },
              "end": {
                "line": 573,
                "column": 47
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "verifyBoolean",
                  "range": [
                    20998,
                    21011
                  ],
                  "loc": {
                    "start": {
                      "line": 574,
                      "column": 4
                    },
                    "end": {
                      "line": 574,
                      "column": 17
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "name",
                    "range": [
                      21012,
                      21016
                    ],
                    "loc": {
                      "start": {
                        "line": 574,
                        "column": 18
                      },
                      "end": {
                        "line": 574,
                        "column": 22
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      21018,
                      21023
                    ],
                    "loc": {
                      "start": {
                        "line": 574,
                        "column": 24
                      },
                      "end": {
                        "line": 574,
                        "column": 29
                      }
                    }
                  },
                  {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      21025,
                      21032
                    ],
                    "loc": {
                      "start": {
                        "line": 574,
                        "column": 31
                      },
                      "end": {
                        "line": 574,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  20998,
                  21033
                ],
                "loc": {
                  "start": {
                    "line": 574,
                    "column": 4
                  },
                  "end": {
                    "line": 574,
                    "column": 39
                  }
                }
              },
              "range": [
                20998,
                21034
              ],
              "loc": {
                "start": {
                  "line": 574,
                  "column": 4
                },
                "end": {
                  "line": 574,
                  "column": 40
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    21043,
                    21048
                  ],
                  "loc": {
                    "start": {
                      "line": 575,
                      "column": 8
                    },
                    "end": {
                      "line": 575,
                      "column": 13
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": false,
                  "raw": "false",
                  "range": [
                    21053,
                    21058
                  ],
                  "loc": {
                    "start": {
                      "line": 575,
                      "column": 18
                    },
                    "end": {
                      "line": 575,
                      "column": 23
                    }
                  }
                },
                "range": [
                  21043,
                  21058
                ],
                "loc": {
                  "start": {
                    "line": 575,
                    "column": 8
                  },
                  "end": {
                    "line": 575,
                    "column": 23
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ThrowStatement",
                    "argument": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "ArgumentFalseError",
                        "range": [
                          21080,
                          21098
                        ],
                        "loc": {
                          "start": {
                            "line": 576,
                            "column": 18
                          },
                          "end": {
                            "line": 576,
                            "column": 36
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            21099,
                            21103
                          ],
                          "loc": {
                            "start": {
                              "line": 576,
                              "column": 37
                            },
                            "end": {
                              "line": 576,
                              "column": 41
                            }
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "errorMessage",
                            "range": [
                              21105,
                              21117
                            ],
                            "loc": {
                              "start": {
                                "line": 576,
                                "column": 43
                              },
                              "end": {
                                "line": 576,
                                "column": 55
                              }
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                21118,
                                21123
                              ],
                              "loc": {
                                "start": {
                                  "line": 576,
                                  "column": 56
                                },
                                "end": {
                                  "line": 576,
                                  "column": 61
                                }
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "message",
                              "range": [
                                21125,
                                21132
                              ],
                              "loc": {
                                "start": {
                                  "line": 576,
                                  "column": 63
                                },
                                "end": {
                                  "line": 576,
                                  "column": 70
                                }
                              }
                            }
                          ],
                          "range": [
                            21105,
                            21133
                          ],
                          "loc": {
                            "start": {
                              "line": 576,
                              "column": 43
                            },
                            "end": {
                              "line": 576,
                              "column": 71
                            }
                          }
                        }
                      ],
                      "range": [
                        21076,
                        21134
                      ],
                      "loc": {
                        "start": {
                          "line": 576,
                          "column": 14
                        },
                        "end": {
                          "line": 576,
                          "column": 72
                        }
                      }
                    },
                    "range": [
                      21070,
                      21135
                    ],
                    "loc": {
                      "start": {
                        "line": 576,
                        "column": 8
                      },
                      "end": {
                        "line": 576,
                        "column": 73
                      }
                    }
                  }
                ],
                "range": [
                  21060,
                  21141
                ],
                "loc": {
                  "start": {
                    "line": 575,
                    "column": 25
                  },
                  "end": {
                    "line": 577,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                21039,
                21141
              ],
              "loc": {
                "start": {
                  "line": 575,
                  "column": 4
                },
                "end": {
                  "line": 577,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            20992,
            21143
          ],
          "loc": {
            "start": {
              "line": 573,
              "column": 49
            },
            "end": {
              "line": 578,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          20950,
          21143
        ],
        "loc": {
          "start": {
            "line": 573,
            "column": 7
          },
          "end": {
            "line": 578,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
            "range": [
              19649,
              20942
            ],
            "loc": {
              "start": {
                "line": 537,
                "column": 0
              },
              "end": {
                "line": 572,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
            "range": [
              21144,
              23578
            ],
            "loc": {
              "start": {
                "line": 579,
                "column": 0
              },
              "end": {
                "line": 638,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        20943,
        21143
      ],
      "loc": {
        "start": {
          "line": 573,
          "column": 0
        },
        "end": {
          "line": 578,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
          "range": [
            19649,
            20942
          ],
          "loc": {
            "start": {
              "line": 537,
              "column": 0
            },
            "end": {
              "line": 572,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
          "range": [
            21144,
            23578
          ],
          "loc": {
            "start": {
              "line": 579,
              "column": 0
            },
            "end": {
              "line": 638,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "verifyTruthy",
          "range": [
            23595,
            23607
          ],
          "loc": {
            "start": {
              "line": 639,
              "column": 16
            },
            "end": {
              "line": 639,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "name",
            "range": [
              23608,
              23612
            ],
            "loc": {
              "start": {
                "line": 639,
                "column": 29
              },
              "end": {
                "line": 639,
                "column": 33
              }
            }
          },
          {
            "type": "Identifier",
            "name": "value",
            "range": [
              23614,
              23619
            ],
            "loc": {
              "start": {
                "line": 639,
                "column": 35
              },
              "end": {
                "line": 639,
                "column": 40
              }
            }
          },
          {
            "type": "AssignmentPattern",
            "left": {
              "type": "Identifier",
              "name": "loose",
              "range": [
                23621,
                23626
              ],
              "loc": {
                "start": {
                  "line": 639,
                  "column": 42
                },
                "end": {
                  "line": 639,
                  "column": 47
                }
              }
            },
            "right": {
              "type": "Literal",
              "value": false,
              "raw": "false",
              "range": [
                23629,
                23634
              ],
              "loc": {
                "start": {
                  "line": 639,
                  "column": 50
                },
                "end": {
                  "line": 639,
                  "column": 55
                }
              }
            },
            "range": [
              23621,
              23634
            ],
            "loc": {
              "start": {
                "line": 639,
                "column": 42
              },
              "end": {
                "line": 639,
                "column": 55
              }
            }
          },
          {
            "type": "Identifier",
            "name": "message",
            "range": [
              23636,
              23643
            ],
            "loc": {
              "start": {
                "line": 639,
                "column": 57
              },
              "end": {
                "line": 639,
                "column": 64
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "IfStatement",
              "test": {
                "type": "UnaryExpression",
                "operator": "!",
                "argument": {
                  "type": "Identifier",
                  "name": "value",
                  "range": [
                    23656,
                    23661
                  ],
                  "loc": {
                    "start": {
                      "line": 640,
                      "column": 9
                    },
                    "end": {
                      "line": 640,
                      "column": 14
                    }
                  }
                },
                "prefix": true,
                "range": [
                  23655,
                  23661
                ],
                "loc": {
                  "start": {
                    "line": 640,
                    "column": 8
                  },
                  "end": {
                    "line": 640,
                    "column": 14
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "Identifier",
                      "name": "loose",
                      "range": [
                        23677,
                        23682
                      ],
                      "loc": {
                        "start": {
                          "line": 641,
                          "column": 12
                        },
                        "end": {
                          "line": 641,
                          "column": 17
                        }
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ThrowStatement",
                          "argument": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "ArgumentFalsyError",
                              "range": [
                                23708,
                                23726
                              ],
                              "loc": {
                                "start": {
                                  "line": 642,
                                  "column": 22
                                },
                                "end": {
                                  "line": 642,
                                  "column": 40
                                }
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "name",
                                "range": [
                                  23727,
                                  23731
                                ],
                                "loc": {
                                  "start": {
                                    "line": 642,
                                    "column": 41
                                  },
                                  "end": {
                                    "line": 642,
                                    "column": 45
                                  }
                                }
                              },
                              {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "errorMessage",
                                  "range": [
                                    23733,
                                    23745
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 642,
                                      "column": 47
                                    },
                                    "end": {
                                      "line": 642,
                                      "column": 59
                                    }
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value",
                                    "range": [
                                      23746,
                                      23751
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 642,
                                        "column": 60
                                      },
                                      "end": {
                                        "line": 642,
                                        "column": 65
                                      }
                                    }
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "message",
                                    "range": [
                                      23753,
                                      23760
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 642,
                                        "column": 67
                                      },
                                      "end": {
                                        "line": 642,
                                        "column": 74
                                      }
                                    }
                                  }
                                ],
                                "range": [
                                  23733,
                                  23761
                                ],
                                "loc": {
                                  "start": {
                                    "line": 642,
                                    "column": 47
                                  },
                                  "end": {
                                    "line": 642,
                                    "column": 75
                                  }
                                }
                              }
                            ],
                            "range": [
                              23704,
                              23762
                            ],
                            "loc": {
                              "start": {
                                "line": 642,
                                "column": 18
                              },
                              "end": {
                                "line": 642,
                                "column": 76
                              }
                            }
                          },
                          "range": [
                            23698,
                            23763
                          ],
                          "loc": {
                            "start": {
                              "line": 642,
                              "column": 12
                            },
                            "end": {
                              "line": 642,
                              "column": 77
                            }
                          }
                        }
                      ],
                      "range": [
                        23684,
                        23773
                      ],
                      "loc": {
                        "start": {
                          "line": 641,
                          "column": 19
                        },
                        "end": {
                          "line": 643,
                          "column": 9
                        }
                      }
                    },
                    "alternate": null,
                    "range": [
                      23673,
                      23773
                    ],
                    "loc": {
                      "start": {
                        "line": 641,
                        "column": 8
                      },
                      "end": {
                        "line": 643,
                        "column": 9
                      }
                    }
                  },
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "verifyNotNull",
                        "range": [
                          23782,
                          23795
                        ],
                        "loc": {
                          "start": {
                            "line": 644,
                            "column": 8
                          },
                          "end": {
                            "line": 644,
                            "column": 21
                          }
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "name",
                          "range": [
                            23796,
                            23800
                          ],
                          "loc": {
                            "start": {
                              "line": 644,
                              "column": 22
                            },
                            "end": {
                              "line": 644,
                              "column": 26
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "value",
                          "range": [
                            23802,
                            23807
                          ],
                          "loc": {
                            "start": {
                              "line": 644,
                              "column": 28
                            },
                            "end": {
                              "line": 644,
                              "column": 33
                            }
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "message",
                          "range": [
                            23809,
                            23816
                          ],
                          "loc": {
                            "start": {
                              "line": 644,
                              "column": 35
                            },
                            "end": {
                              "line": 644,
                              "column": 42
                            }
                          }
                        }
                      ],
                      "range": [
                        23782,
                        23817
                      ],
                      "loc": {
                        "start": {
                          "line": 644,
                          "column": 8
                        },
                        "end": {
                          "line": 644,
                          "column": 43
                        }
                      }
                    },
                    "range": [
                      23782,
                      23818
                    ],
                    "loc": {
                      "start": {
                        "line": 644,
                        "column": 8
                      },
                      "end": {
                        "line": 644,
                        "column": 44
                      }
                    },
                    "trailingComments": [
                      {
                        "type": "Line",
                        "value": " Also checks for defined.",
                        "range": [
                          23819,
                          23846
                        ],
                        "loc": {
                          "start": {
                            "line": 644,
                            "column": 45
                          },
                          "end": {
                            "line": 644,
                            "column": 72
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "value",
                          "range": [
                            23866,
                            23871
                          ],
                          "loc": {
                            "start": {
                              "line": 645,
                              "column": 19
                            },
                            "end": {
                              "line": 645,
                              "column": 24
                            }
                          }
                        },
                        "prefix": true,
                        "range": [
                          23859,
                          23871
                        ],
                        "loc": {
                          "start": {
                            "line": 645,
                            "column": 12
                          },
                          "end": {
                            "line": 645,
                            "column": 24
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": "boolean",
                        "raw": "'boolean'",
                        "range": [
                          23876,
                          23885
                        ],
                        "loc": {
                          "start": {
                            "line": 645,
                            "column": 29
                          },
                          "end": {
                            "line": 645,
                            "column": 38
                          }
                        }
                      },
                      "range": [
                        23859,
                        23885
                      ],
                      "loc": {
                        "start": {
                          "line": 645,
                          "column": 12
                        },
                        "end": {
                          "line": 645,
                          "column": 38
                        }
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "verifyTrue",
                              "range": [
                                23901,
                                23911
                              ],
                              "loc": {
                                "start": {
                                  "line": 646,
                                  "column": 12
                                },
                                "end": {
                                  "line": 646,
                                  "column": 22
                                }
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "name",
                                "range": [
                                  23912,
                                  23916
                                ],
                                "loc": {
                                  "start": {
                                    "line": 646,
                                    "column": 23
                                  },
                                  "end": {
                                    "line": 646,
                                    "column": 27
                                  }
                                }
                              },
                              {
                                "type": "Identifier",
                                "name": "value",
                                "range": [
                                  23918,
                                  23923
                                ],
                                "loc": {
                                  "start": {
                                    "line": 646,
                                    "column": 29
                                  },
                                  "end": {
                                    "line": 646,
                                    "column": 34
                                  }
                                }
                              },
                              {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "errorMessage",
                                  "range": [
                                    23925,
                                    23937
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 646,
                                      "column": 36
                                    },
                                    "end": {
                                      "line": 646,
                                      "column": 48
                                    }
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value",
                                    "range": [
                                      23938,
                                      23943
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 646,
                                        "column": 49
                                      },
                                      "end": {
                                        "line": 646,
                                        "column": 54
                                      }
                                    }
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "message",
                                    "range": [
                                      23945,
                                      23952
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 646,
                                        "column": 56
                                      },
                                      "end": {
                                        "line": 646,
                                        "column": 63
                                      }
                                    }
                                  }
                                ],
                                "range": [
                                  23925,
                                  23953
                                ],
                                "loc": {
                                  "start": {
                                    "line": 646,
                                    "column": 36
                                  },
                                  "end": {
                                    "line": 646,
                                    "column": 64
                                  }
                                }
                              }
                            ],
                            "range": [
                              23901,
                              23954
                            ],
                            "loc": {
                              "start": {
                                "line": 646,
                                "column": 12
                              },
                              "end": {
                                "line": 646,
                                "column": 65
                              }
                            }
                          },
                          "range": [
                            23901,
                            23955
                          ],
                          "loc": {
                            "start": {
                              "line": 646,
                              "column": 12
                            },
                            "end": {
                              "line": 646,
                              "column": 66
                            }
                          }
                        }
                      ],
                      "range": [
                        23887,
                        23965
                      ],
                      "loc": {
                        "start": {
                          "line": 645,
                          "column": 40
                        },
                        "end": {
                          "line": 647,
                          "column": 9
                        }
                      }
                    },
                    "alternate": {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "Identifier",
                            "name": "value",
                            "range": [
                              23990,
                              23995
                            ],
                            "loc": {
                              "start": {
                                "line": 648,
                                "column": 24
                              },
                              "end": {
                                "line": 648,
                                "column": 29
                              }
                            }
                          },
                          "prefix": true,
                          "range": [
                            23983,
                            23995
                          ],
                          "loc": {
                            "start": {
                              "line": 648,
                              "column": 17
                            },
                            "end": {
                              "line": 648,
                              "column": 29
                            }
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": "string",
                          "raw": "'string'",
                          "range": [
                            24000,
                            24008
                          ],
                          "loc": {
                            "start": {
                              "line": 648,
                              "column": 34
                            },
                            "end": {
                              "line": 648,
                              "column": 42
                            }
                          }
                        },
                        "range": [
                          23983,
                          24008
                        ],
                        "loc": {
                          "start": {
                            "line": 648,
                            "column": 17
                          },
                          "end": {
                            "line": 648,
                            "column": 42
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "verifyNonEmpty",
                                "range": [
                                  24024,
                                  24038
                                ],
                                "loc": {
                                  "start": {
                                    "line": 649,
                                    "column": 12
                                  },
                                  "end": {
                                    "line": 649,
                                    "column": 26
                                  }
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "name",
                                  "range": [
                                    24039,
                                    24043
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 649,
                                      "column": 27
                                    },
                                    "end": {
                                      "line": 649,
                                      "column": 31
                                    }
                                  }
                                },
                                {
                                  "type": "Identifier",
                                  "name": "value",
                                  "range": [
                                    24045,
                                    24050
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 649,
                                      "column": 33
                                    },
                                    "end": {
                                      "line": 649,
                                      "column": 38
                                    }
                                  }
                                },
                                {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "errorMessage",
                                    "range": [
                                      24052,
                                      24064
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 649,
                                        "column": 40
                                      },
                                      "end": {
                                        "line": 649,
                                        "column": 52
                                      }
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value",
                                      "range": [
                                        24065,
                                        24070
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 649,
                                          "column": 53
                                        },
                                        "end": {
                                          "line": 649,
                                          "column": 58
                                        }
                                      }
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "message",
                                      "range": [
                                        24072,
                                        24079
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 649,
                                          "column": 60
                                        },
                                        "end": {
                                          "line": 649,
                                          "column": 67
                                        }
                                      }
                                    }
                                  ],
                                  "range": [
                                    24052,
                                    24080
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 649,
                                      "column": 40
                                    },
                                    "end": {
                                      "line": 649,
                                      "column": 68
                                    }
                                  }
                                }
                              ],
                              "range": [
                                24024,
                                24081
                              ],
                              "loc": {
                                "start": {
                                  "line": 649,
                                  "column": 12
                                },
                                "end": {
                                  "line": 649,
                                  "column": 69
                                }
                              }
                            },
                            "range": [
                              24024,
                              24082
                            ],
                            "loc": {
                              "start": {
                                "line": 649,
                                "column": 12
                              },
                              "end": {
                                "line": 649,
                                "column": 70
                              }
                            }
                          }
                        ],
                        "range": [
                          24010,
                          24092
                        ],
                        "loc": {
                          "start": {
                            "line": 648,
                            "column": 44
                          },
                          "end": {
                            "line": 650,
                            "column": 9
                          }
                        }
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "typeof",
                            "argument": {
                              "type": "Identifier",
                              "name": "value",
                              "range": [
                                24117,
                                24122
                              ],
                              "loc": {
                                "start": {
                                  "line": 651,
                                  "column": 24
                                },
                                "end": {
                                  "line": 651,
                                  "column": 29
                                }
                              }
                            },
                            "prefix": true,
                            "range": [
                              24110,
                              24122
                            ],
                            "loc": {
                              "start": {
                                "line": 651,
                                "column": 17
                              },
                              "end": {
                                "line": 651,
                                "column": 29
                              }
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": "number",
                            "raw": "'number'",
                            "range": [
                              24127,
                              24135
                            ],
                            "loc": {
                              "start": {
                                "line": 651,
                                "column": 34
                              },
                              "end": {
                                "line": 651,
                                "column": 42
                              }
                            }
                          },
                          "range": [
                            24110,
                            24135
                          ],
                          "loc": {
                            "start": {
                              "line": 651,
                              "column": 17
                            },
                            "end": {
                              "line": 651,
                              "column": 42
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "verifyNonZero",
                                  "range": [
                                    24190,
                                    24203
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 653,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 653,
                                      "column": 25
                                    }
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "name",
                                    "range": [
                                      24204,
                                      24208
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 653,
                                        "column": 26
                                      },
                                      "end": {
                                        "line": 653,
                                        "column": 30
                                      }
                                    }
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "value",
                                    "range": [
                                      24210,
                                      24215
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 653,
                                        "column": 32
                                      },
                                      "end": {
                                        "line": 653,
                                        "column": 37
                                      }
                                    }
                                  },
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "errorMessage",
                                      "range": [
                                        24217,
                                        24229
                                      ],
                                      "loc": {
                                        "start": {
                                          "line": 653,
                                          "column": 39
                                        },
                                        "end": {
                                          "line": 653,
                                          "column": 51
                                        }
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "value",
                                        "range": [
                                          24230,
                                          24235
                                        ],
                                        "loc": {
                                          "start": {
                                            "line": 653,
                                            "column": 52
                                          },
                                          "end": {
                                            "line": 653,
                                            "column": 57
                                          }
                                        }
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "message",
                                        "range": [
                                          24237,
                                          24244
                                        ],
                                        "loc": {
                                          "start": {
                                            "line": 653,
                                            "column": 59
                                          },
                                          "end": {
                                            "line": 653,
                                            "column": 66
                                          }
                                        }
                                      }
                                    ],
                                    "range": [
                                      24217,
                                      24245
                                    ],
                                    "loc": {
                                      "start": {
                                        "line": 653,
                                        "column": 39
                                      },
                                      "end": {
                                        "line": 653,
                                        "column": 67
                                      }
                                    }
                                  }
                                ],
                                "range": [
                                  24190,
                                  24246
                                ],
                                "loc": {
                                  "start": {
                                    "line": 653,
                                    "column": 12
                                  },
                                  "end": {
                                    "line": 653,
                                    "column": 68
                                  }
                                }
                              },
                              "range": [
                                24190,
                                24247
                              ],
                              "loc": {
                                "start": {
                                  "line": 653,
                                  "column": 12
                                },
                                "end": {
                                  "line": 653,
                                  "column": 69
                                }
                              },
                              "leadingComments": [
                                {
                                  "type": "Line",
                                  "value": " Also checks for not NaN",
                                  "range": [
                                    24151,
                                    24177
                                  ],
                                  "loc": {
                                    "start": {
                                      "line": 652,
                                      "column": 12
                                    },
                                    "end": {
                                      "line": 652,
                                      "column": 38
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "range": [
                            24137,
                            24257
                          ],
                          "loc": {
                            "start": {
                              "line": 651,
                              "column": 44
                            },
                            "end": {
                              "line": 654,
                              "column": 9
                            }
                          }
                        },
                        "alternate": null,
                        "range": [
                          24106,
                          24257
                        ],
                        "loc": {
                          "start": {
                            "line": 651,
                            "column": 13
                          },
                          "end": {
                            "line": 654,
                            "column": 9
                          }
                        }
                      },
                      "range": [
                        23979,
                        24257
                      ],
                      "loc": {
                        "start": {
                          "line": 648,
                          "column": 13
                        },
                        "end": {
                          "line": 654,
                          "column": 9
                        }
                      }
                    },
                    "range": [
                      23855,
                      24257
                    ],
                    "loc": {
                      "start": {
                        "line": 645,
                        "column": 8
                      },
                      "end": {
                        "line": 654,
                        "column": 9
                      }
                    },
                    "leadingComments": [
                      {
                        "type": "Line",
                        "value": " Also checks for defined.",
                        "range": [
                          23819,
                          23846
                        ],
                        "loc": {
                          "start": {
                            "line": 644,
                            "column": 45
                          },
                          "end": {
                            "line": 644,
                            "column": 72
                          }
                        }
                      }
                    ]
                  }
                ],
                "range": [
                  23663,
                  24263
                ],
                "loc": {
                  "start": {
                    "line": 640,
                    "column": 16
                  },
                  "end": {
                    "line": 655,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                23651,
                24263
              ],
              "loc": {
                "start": {
                  "line": 640,
                  "column": 4
                },
                "end": {
                  "line": 655,
                  "column": 5
                }
              }
            }
          ],
          "range": [
            23645,
            24265
          ],
          "loc": {
            "start": {
              "line": 639,
              "column": 66
            },
            "end": {
              "line": 656,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          23586,
          24265
        ],
        "loc": {
          "start": {
            "line": 639,
            "column": 7
          },
          "end": {
            "line": 656,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
            "range": [
              21144,
              23578
            ],
            "loc": {
              "start": {
                "line": 579,
                "column": 0
              },
              "end": {
                "line": 638,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        23579,
        24265
      ],
      "loc": {
        "start": {
          "line": 639,
          "column": 0
        },
        "end": {
          "line": 656,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
          "range": [
            21144,
            23578
          ],
          "loc": {
            "start": {
              "line": 579,
              "column": 0
            },
            "end": {
              "line": 638,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "errorMessage",
        "range": [
          24275,
          24287
        ],
        "loc": {
          "start": {
            "line": 657,
            "column": 9
          },
          "end": {
            "line": 657,
            "column": 21
          }
        }
      },
      "params": [
        {
          "type": "Identifier",
          "name": "value",
          "range": [
            24288,
            24293
          ],
          "loc": {
            "start": {
              "line": 657,
              "column": 22
            },
            "end": {
              "line": 657,
              "column": 27
            }
          }
        },
        {
          "type": "Identifier",
          "name": "message",
          "range": [
            24295,
            24302
          ],
          "loc": {
            "start": {
              "line": 657,
              "column": 29
            },
            "end": {
              "line": 657,
              "column": 36
            }
          }
        }
      ],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "Identifier",
                    "name": "message",
                    "range": [
                      24325,
                      24332
                    ],
                    "loc": {
                      "start": {
                        "line": 658,
                        "column": 19
                      },
                      "end": {
                        "line": 658,
                        "column": 26
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    24318,
                    24332
                  ],
                  "loc": {
                    "start": {
                      "line": 658,
                      "column": 12
                    },
                    "end": {
                      "line": 658,
                      "column": 26
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "function",
                  "raw": "'function'",
                  "range": [
                    24337,
                    24347
                  ],
                  "loc": {
                    "start": {
                      "line": 658,
                      "column": 31
                    },
                    "end": {
                      "line": 658,
                      "column": 41
                    }
                  }
                },
                "range": [
                  24318,
                  24347
                ],
                "loc": {
                  "start": {
                    "line": 658,
                    "column": 12
                  },
                  "end": {
                    "line": 658,
                    "column": 41
                  }
                }
              },
              "consequent": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "message",
                  "range": [
                    24351,
                    24358
                  ],
                  "loc": {
                    "start": {
                      "line": 658,
                      "column": 45
                    },
                    "end": {
                      "line": 658,
                      "column": 52
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "value",
                    "range": [
                      24359,
                      24364
                    ],
                    "loc": {
                      "start": {
                        "line": 658,
                        "column": 53
                      },
                      "end": {
                        "line": 658,
                        "column": 58
                      }
                    }
                  }
                ],
                "range": [
                  24351,
                  24365
                ],
                "loc": {
                  "start": {
                    "line": 658,
                    "column": 45
                  },
                  "end": {
                    "line": 658,
                    "column": 59
                  }
                }
              },
              "alternate": {
                "type": "Identifier",
                "name": "message",
                "range": [
                  24368,
                  24375
                ],
                "loc": {
                  "start": {
                    "line": 658,
                    "column": 62
                  },
                  "end": {
                    "line": 658,
                    "column": 69
                  }
                }
              },
              "range": [
                24317,
                24375
              ],
              "loc": {
                "start": {
                  "line": 658,
                  "column": 11
                },
                "end": {
                  "line": 658,
                  "column": 69
                }
              }
            },
            "range": [
              24310,
              24376
            ],
            "loc": {
              "start": {
                "line": 658,
                "column": 4
              },
              "end": {
                "line": 658,
                "column": 70
              }
            }
          }
        ],
        "range": [
          24304,
          24378
        ],
        "loc": {
          "start": {
            "line": 657,
            "column": 38
          },
          "end": {
            "line": 659,
            "column": 1
          }
        }
      },
      "generator": false,
      "expression": false,
      "range": [
        24266,
        24378
      ],
      "loc": {
        "start": {
          "line": 657,
          "column": 0
        },
        "end": {
          "line": 659,
          "column": 1
        }
      }
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    24378
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 659,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value does not pass the specified test.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {!function(value: T) => boolean} test -\n *    Evaluates whether the value meets expectations.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentError}\n *    The test failed.\n *\n * @example <caption>verify that parameter deposit is non-negative</caption>\n * verifyArgument('deposit', deposit, arg => arg > 0.0);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, examples ④ & ⑤</a>\n * @see {@link ArgumentError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        638,
        1844
      ],
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 43,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is not an `Array`.\n *\n * > **Note:** Calls {@link Array.isArray}.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not an `Array`.\n *\n * @example <caption>verify that parameter collection is an Array</caption>\n * verifyArray('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyIterable}\n * @since 0.0.1\n ",
      "range": [
        2007,
        3237
      ],
      "loc": {
        "start": {
          "line": 49,
          "column": 0
        },
        "end": {
          "line": 83,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is not strictly a boolean value.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {boolean} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not `boolean`.\n *\n * @example <caption>verify that parameter isValid is boolean</caption>\n * verifyBoolean('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        3454,
        4608
      ],
      "loc": {
        "start": {
          "line": 90,
          "column": 0
        },
        "end": {
          "line": 121,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is `undefined`.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n *\n * @example <caption>verify that parameter element is defined</caption>\n * verifyDefined('element', element);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        4834,
        5957
      ],
      "loc": {
        "start": {
          "line": 128,
          "column": 0
        },
        "end": {
          "line": 158,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is not strictly a function expression.\n *\n * > **Note:** If you want to test for _truthy_ values, use {@link verifyTruthy}.\n *\n * @param {!string} name -\n *    The formal parameter name.\n * @param {Function} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument is not a `function`.\n *\n * @example <caption>verify that parameter factory is a function</caption>\n * verifyFunction('factory', factory);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link verifyDefined}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        6129,
        7297
      ],
      "loc": {
        "start": {
          "line": 164,
          "column": 0
        },
        "end": {
          "line": 195,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument does not support iteration.\n *\n * > **Note:** Calls {@link isIterable} to determine iterability.\n *\n * @param T -\n *    The `element` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {!string} name -\n *    The formal parameter name.\n * @param {T} value -\n *    The function argument.\n * @param {(string | function(value: string): string)} [message] -\n *    Optional custom message or message factory.\n *\n * @throws {ArgumentUndefinedError}\n *    The argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    The argument does not support iteration.\n *\n * @example <caption>verify that parameter collection is iterable</caption>\n * verifyIterable('collection', collection);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link isIterable}\n * @see {@link verifyArray}\n * @since 0.0.1\n ",
      "range": [
        7526,
        8796
      ],
      "loc": {
        "start": {
          "line": 202,
          "column": 0
        },
        "end": {
          "line": 236,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a non-empty string.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n *\n * @example <caption>verify that parameter firstName is a non-empty string</caption>\n * verifyNonEmpty('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
      "range": [
        9027,
        10276
      ],
      "loc": {
        "start": {
          "line": 243,
          "column": 0
        },
        "end": {
          "line": 276,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a non-zero number.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
      "range": [
        10484,
        11758
      ],
      "loc": {
        "start": {
          "line": 283,
          "column": 0
        },
        "end": {
          "line": 318,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is `undefined` or `null`.\n *\n * > **Note:** Consider using {@link verifyTruthy} or {@link verifyObject}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ①</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNumber}\n * @since 0.0.1\n ",
      "range": [
        11957,
        13321
      ],
      "loc": {
        "start": {
          "line": 325,
          "column": 0
        },
        "end": {
          "line": 362,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument is not a string with non whitespace characters.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string`.\n * @throws {ArgumentWhitespaceStringError}\n *    the argument has only whitespace characters.\n *\n * @example <caption>verify that parameter firstName has non-whitespace characters</caption>\n * verifyNotWhitespace('firstName', firstName);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ②</a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentWhitespaceStringError}\n * @see {@link verifyDefined}\n * @see {@link verifyString}\n * @see {@link verifyNonEmpty}\n * @since 0.0.1\n ",
      "range": [
        13524,
        14936
      ],
      "loc": {
        "start": {
          "line": 369,
          "column": 0
        },
        "end": {
          "line": 405,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a `number` or has a value of `NaN`.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {number} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `number`.\n * @throws {ArgumentNanError}\n *    the argument is `NaN`.\n * @throws {ArgumentZeroError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter price is a number</caption>\n * verifyNumber('price', price);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
      "range": [
        15163,
        16442
      ],
      "loc": {
        "start": {
          "line": 412,
          "column": 0
        },
        "end": {
          "line": 447,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not an `Object`.\n *\n * > **Note:** To exclude `null` values also call {@link verifyNotNull}\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {Object} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not an `Object`.\n *\n * @example <caption>verify that parameter height has a nonzero value</caption>\n * verifyNonEmpty('height', height);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonZero}\n * @since 0.0.1\n ",
      "range": [
        16774,
        17982
      ],
      "loc": {
        "start": {
          "line": 457,
          "column": 0
        },
        "end": {
          "line": 490,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a `string`.\n *\n * > **Note:** To verify a meaningful value consider using {@link verifyNonEmpty} or\n * > {@link verifyNotWhitespace}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {string} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `string`.\n *\n * @example <caption>verify that parameter alphabet is a string</caption>\n * verifyNonEmpty('alphabet', alphabet);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNotWhitespace}\n * @since 0.0.1\n ",
      "range": [
        18205,
        19426
      ],
      "loc": {
        "start": {
          "line": 497,
          "column": 0
        },
        "end": {
          "line": 530,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not a boolean with the value 'true'.\n *\n * > **Note:** To verify a _truthy_ value, use {@link verifyTruthy}.\n *\n * @param {string} name -\n *    the formal parameter name\n * @param {boolean} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined`.\n * @throws {ArgumentTypeError}\n *    the argument is not a `boolean`.\n * @throws {ArgumentFalseError}\n *    the argument is a number the value zero.\n *\n * @example <caption>verify that parameter isValid is true</caption>\n * verifyNonEmpty('isValid', isValid);\n *\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code></a>\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentTypeError}\n * @see {@link ArgumentFalseError}\n * @see {@link verifyDefined}\n * @see {@link verifyBoolean}\n * @see {@link verifyTruthy}\n * @since 0.0.1\n ",
      "range": [
        19649,
        20942
      ],
      "loc": {
        "start": {
          "line": 537,
          "column": 0
        },
        "end": {
          "line": 572,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * Throws an error if the specified argument value is not _truthy_.\n *\n * The `loose` parameter changes what exception is thrown. If `loose`, then only\n * {@link ArgumentFalsyError} is thrown. Otherwise, the exception for the appropriate _falsy_ value\n * is thrown.\n *\n * > **Note:** You can test for any of the _falsy_ values individually using the appropriate\n * > `verify...` function.\n *\n * @param T -\n *    The `value` type. **Note:** This is a TypeScript type parameter, not a parameter of the\n *    function.\n * @param {string} name -\n *    the formal parameter name\n * @param {T} value -\n *    the function argument\n * @param {?(string | function(value: string): string)} message -\n *    optional custom message or message factory\n *\n * @throws {ArgumentFalsyError}\n *    the argument is _falsy_ and `loose` is specified.\n * @throws {ArgumentEmptyStringError}\n *    the argument is an empty `string` and `loose` is not specified.\n * @throws {ArgumentFalseError}\n *    the argument has the value `false` and `loose` is not specified.\n * @throws {ArgumentNanError}\n *    the argument has the value `NaN` and `loose` is not specified.\n * @throws {ArgumentNullError}\n *    the argument has the value `null` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is `undefined` and `loose` is not specified.\n * @throws {ArgumentUndefinedError}\n *    the argument is zero and `loose` is not specified.\n *\n * @example <caption>verify that parameter item is truthy</caption>\n * verifyTruthy('item', item);\n *\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\">\n *    Definition of falsy</a> (MDN)\n * @see <a href=\"manual/overview.html#package-jali-ms-util\">\n *    package <code>@jali-ms/util</code></a>\n * @see <a href=\"manual/overview.html#module-jali-ms-util-errors\">\n *    module <code>@jali-ms/util/errors</code></a>\n * @see <a href=\"manual/example.html#jali_ms_util_errors\">\n *    Example method <code>jali_ms_util_errors</code>, example ③</a>\n * @see {@link ArgumentEmptyStringError}\n * @see {@link ArgumentFalseError}\n * @see {@link ArgumentNanError}\n * @see {@link ArgumentNullError}\n * @see {@link ArgumentUndefinedError}\n * @see {@link ArgumentZeroError}\n * @see {@link verifyDefined}\n * @see {@link verifyNonEmpty}\n * @see {@link verifyNonZero}\n * @see {@link verifyNotNull}\n * @see {@link verifyNumber}\n * @see {@link verifyTrue}\n * @since 0.0.1\n ",
      "range": [
        21144,
        23578
      ],
      "loc": {
        "start": {
          "line": 579,
          "column": 0
        },
        "end": {
          "line": 638,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": " Also checks for defined.",
      "range": [
        23819,
        23846
      ],
      "loc": {
        "start": {
          "line": 644,
          "column": 45
        },
        "end": {
          "line": 644,
          "column": 72
        }
      }
    },
    {
      "type": "Line",
      "value": " Also checks for not NaN",
      "range": [
        24151,
        24177
      ],
      "loc": {
        "start": {
          "line": 652,
          "column": 12
        },
        "end": {
          "line": 652,
          "column": 38
        }
      }
    }
  ]
}